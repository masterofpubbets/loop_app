--version11.0.7
UPDATE [dbo].[tblSettings] SET SetValue = '11.0.7' WHERE SetName = 'VERSION'
GO
CREATE SCHEMA MOTORS
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UpdateQCReleasedFromHCS'
			AND schema_id = (select schema_id from sys.schemas where name = 'LOOPS')
			)
BEGIN
	DROP PROC LOOPS.UpdateQCReleasedFromHCS
END
GO
CREATE PROC [LOOPS].[UpdateQCReleasedFromHCS]
AS
WITH HCSGroups AS (
    SELECT [ElementTag]
        ,[Type]
        ,[Discipline]
        ,[Description]
        ,[Subsystem]
        ,[Group]
        ,[GroupActive]
        ,GroupType
    FROM [HCS].[ProjectElements]
)

UPDATE v
    SET v.TR_Loop_Folder_QC_Release = GETDATE()
FROM (
    SELECT
    tblInsLoop.LoopName, tblInsLoop.TR_Loop_Folder_QC_Release,
    TaskStatus.TaskCount, TaskStatus.TaskClosed
    FROM tblInsLoop
    INNER JOIN (
        SELECT 
            HCSGroups.[Group]
            ,COUNT([ElementCode]) AS TaskCount
            ,COUNT([ClosingDate]) AS TaskClosed
        FROM [HCS].[ProjectTasks] AS Tasks
        INNER JOIN HCSGroups ON Tasks.ElementCode = HCSGroups.ElementTag
        WHERE Tasks.[Description] NOT LIKE '%VENDOR SITE ACCEPTANCE TEST%'
        GROUP BY HCSGroups.[Group]
        HAVING COUNT([ElementCode]) = COUNT([ClosingDate])
    ) AS TaskStatus
    ON tblInsLoop.LoopName = TaskStatus.[Group]
) AS v
WHERE v.TR_Loop_Folder_QC_Release IS NULL
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'U' 
			AND name = 'tblMotorRun'
			AND schema_id = (select schema_id from sys.schemas where name = 'dbo')
			)
BEGIN
	DROP TABLE dbo.tblMotorRun
END
GO
IF NOT EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'U' 
			AND name = 'tblSolorun'
			AND schema_id = (select schema_id from sys.schemas where name = 'dbo')
			)
BEGIN
	CREATE TABLE [dbo].[tblSolorun](
        [Id] [int] IDENTITY(1,1) NOT NULL,
        [FolderName] [nvarchar](100) NULL,
        [L_Type] [nvarchar](100) NULL,
        [Sub_Type] [nvarchar](50) NULL,
        [L_Description] [nvarchar](255) NULL,
        [L_HookUp] [nvarchar](100) NULL,
        [Folder_Preparation] [date] NULL,
        [ReInstatement_Date] [date] NULL,
        [L_Constr_Release] [date] NULL,
        [L_Constr_Remarks] [nvarchar](max) NULL,
        [TR_Loop_Folder_QC_Release] [date] NULL,
        [L_TRQC_Remarks] [nvarchar](max) NULL,
        [Punch_To_SubContractor] [date] NULL,
        [SubContractor_To_Cons] [date] NULL,
        [Loops_Client_QC_Release] [date] NULL,
        [L_ClientQC_Remarks] [nvarchar](max) NULL,
        [HCS_Folder_Ready] [date] NULL,
        [L_HCS_Remarks] [nvarchar](max) NULL,
        [HCS_Submitted_To_Client] [date] NULL,
        [Client_Reject] [date] NULL,
        [Folder_Client_Approved] [date] NULL,
        [Submitted_to_Precom] [date] NULL,
        [Precom_Reject] [date] NULL,
        [L_Precom_Remarks] [nvarchar](max) NULL,
        [Submitted_To_Client_Precom] [date] NULL,
        [Client_Precom_Reject] [date] NULL,
        [Client_Precom_Approved] [date] NULL,
        [L_Done] [date] NULL,
        [Submitted_For_Certificate] [date] NULL,
        [L_FinalApproval] [date] NULL,
        [L_Remarks] [nvarchar](255) NULL,
        [Subsystem] [nvarchar](50) NULL,
        [Area] [nvarchar](50) NOT NULL,
        [Planning_START_Date] [date] NULL,
        [Planning_FINISH_Date] [date] NULL,
        [Active] [bit] NULL,
        [PID] [nvarchar](50) NULL,
        [ACTIVITYID] [nvarchar](50) NULL,
        [FolderPriority] [int] NULL,
        [Subcontractor] [nvarchar](50) NULL,
        [Vendor] [nvarchar](50) NULL,
        [Team] [nvarchar](255) NULL,
        [qrCode] [varbinary](max) NULL,
        [ProUUID] [nvarchar](255) NULL,
        [SubmitToQC] [date] NULL,
        [ReturnFromQC] [date] NULL,
        [PDSModel] [nvarchar](100) NULL,
        LCSInstalled BIT NOT NULL DEFAULT 0,
        Grouting BIT NOT NULL DEFAULT 0,
        MotorInstalled BIT NOT NULL DEFAULT 0,
        Grounding  BIT NOT NULL DEFAULT 0,
        [LCS Control Cable (SS)] BIT NOT NULL DEFAULT 0,
        [LCS Control Cable (Field)] BIT NOT NULL DEFAULT 0,
        [Motor Power Cable (SS)] BIT NOT NULL DEFAULT 0,
        [Motor Power Cable (Field)] BIT NOT NULL DEFAULT 0,
        [Cable Testing] BIT NOT NULL DEFAULT 0,
        [Motor IR & WR] BIT NOT NULL DEFAULT 0,
        [Mech Release] BIT NOT NULL DEFAULT 0,
        COC  BIT NOT NULL DEFAULT 0,
        LUN BIT NOT NULL DEFAULT 0,
        [Bump Test] BIT NOT NULL DEFAULT 0,
        [Motor Temp] BIT NOT NULL DEFAULT 0,
        Vibration BIT NOT NULL DEFAULT 0,
        Speed  BIT NOT NULL DEFAULT 0,
        Amps BIT NOT NULL DEFAULT 0,
        [MSR Status] BIT NOT NULL DEFAULT 0,
        PRIMARY KEY (Id)
    )
END
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetLog'
			AND schema_id = (select schema_id from sys.schemas where name = 'LOOPS')
			)
BEGIN
	DROP PROC LOOPS.GetLog
END
GO
CREATE PROC [LOOPS].[GetLog]
AS
SELECT [Tag] AS Folder
      ,[Step_Name] AS Action
      ,[uname] AS [Action By]
      ,[udate] [Action On]
      ,[uvalue] [Changed To]
  FROM [dbo].[tblInsLoop_Log]
  ORDER BY udate
  GO
  IF NOT EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'U' 
			AND name = 'tblSolorun_Log'
			AND schema_id = (select schema_id from sys.schemas where name = 'dbo')
			)
BEGIN
    CREATE TABLE [dbo].[tblSolorun_Log] (
        [Id] [int] IDENTITY(1,1) NOT NULL,
        [Tag] [nvarchar](50) NOT NULL,
        [Step_Name] [nvarchar](50) NOT NULL,
        [uname] [nvarchar](50) NOT NULL,
        [udate] [datetime] NOT NULL,
        [uvalue] [nvarchar](50) NULL,
        PRIMARY KEY (Id)
    )
END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblSolorun_Del'
			)
BEGIN
	DROP TRIGGER tr_tblSolorun_Del
END
GO
CREATE TRIGGER [tr_tblSolorun_Del]
   ON [dbo].[tblSolorun]
   FOR DELETE
AS BEGIN
    SET NOCOUNT ON;

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT deleted.FolderName from deleted
		DECLARE @TAG NVARCHAR(50)
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @TAG
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @TAG
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@TAG,'Deleted',system_user,getdate(),null)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor

END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblSolorun_Log_Ren'
			)
BEGIN
	DROP TRIGGER tr_tblSolorun_Log_Ren
END
GO
CREATE TRIGGER [dbo].[tr_tblSolorun_Log_Ren]
   ON [dbo].[tblSolorun]
   FOR UPDATE
AS BEGIN
    SET NOCOUNT ON;
    IF UPDATE (FolderName) 
    BEGIN

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT inserted.FolderName as newTag,deleted.FolderName as oldTag from inserted
		inner join deleted on inserted.Id = deleted.Id
		DECLARE @oldTAG NVARCHAR(50)
		DECLARE @newTAG NVARCHAR(50)
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @newTAG,@oldTAG
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @newTAG,@oldTAG
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@oldTAG,'Tag Changed',system_user,getdate(),@newTAG)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor
    END 
END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblSolorun_Log_HCSFReady'
			)
BEGIN
	DROP TRIGGER tr_tblSolorun_Log_HCSFReady
END
GO
CREATE TRIGGER [dbo].[tr_tblSolorun_Log_HCSFReady]
   ON [dbo].[tblSolorun]
   FOR UPDATE
AS BEGIN
    SET NOCOUNT ON;
    IF UPDATE ([Folder_Preparation]) 
    BEGIN

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT inserted.FolderName as Tag,inserted.Folder_Preparation from inserted
		inner join deleted on inserted.Id = deleted.Id
		DECLARE @TAG NVARCHAR(50)
		DECLARE @Folder_Preparation DATE
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @TAG,@Folder_Preparation
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @TAG,@Folder_Preparation
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@TAG,'Folder Prepared',system_user,getdate(),@Folder_Preparation)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor
    END 
END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblSolorun_Log_SubmitToQC'
			)
BEGIN
	DROP TRIGGER tr_tblSolorun_Log_SubmitToQC
END
GO
CREATE TRIGGER [dbo].[tr_tblSolorun_Log_SubmitToQC]
   ON [dbo].[tblSolorun]
   FOR UPDATE
AS BEGIN
    SET NOCOUNT ON;
    IF UPDATE ([SubmitToQC]) 
    BEGIN

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT inserted.FolderName as Tag,inserted.SubmitToQC from inserted
		inner join deleted on inserted.Id = deleted.Id
		DECLARE @TAG NVARCHAR(50)
		DECLARE @SubmitToQC DATE
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @TAG,@SubmitToQC
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @TAG,@SubmitToQC
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@TAG,'Submit To QC',system_user,getdate(),@SubmitToQC)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor
    END 
END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblISolorun_Log_SubmitToPrecom'
			)
BEGIN
	DROP TRIGGER tr_tblISolorun_Log_SubmitToPrecom
END
GO
CREATE TRIGGER [dbo].[tr_tblISolorun_Log_SubmitToPrecom]
   ON [dbo].[tblSolorun]
   FOR UPDATE
AS BEGIN
    SET NOCOUNT ON;
    IF UPDATE (Submitted_to_Precom) 
    BEGIN

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT inserted.FolderName as Tag,inserted.Submitted_to_Precom from inserted
		inner join deleted on inserted.Id = deleted.Id
		DECLARE @TAG NVARCHAR(50)
		DECLARE @L_FinalApproval DATE
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @TAG,@L_FinalApproval
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @TAG,@L_FinalApproval
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@TAG,'Submit To Precomm',system_user,getdate(),@L_FinalApproval)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor
    END 
END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblSolorun_Log_ReturnFromQC'
			)
BEGIN
	DROP TRIGGER tr_tblSolorun_Log_ReturnFromQC
END
GO
CREATE TRIGGER [dbo].[tr_tblSolorun_Log_ReturnFromQC]
   ON [dbo].[tblSolorun]
   FOR UPDATE
AS BEGIN
    SET NOCOUNT ON;
    IF UPDATE ([ReturnFromQC]) 
    BEGIN

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT inserted.FolderName as Tag,inserted.ReturnFromQC from inserted
		inner join deleted on inserted.Id = deleted.Id
		DECLARE @TAG NVARCHAR(50)
		DECLARE @ReturnFromQC DATE
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @TAG,@ReturnFromQC
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @TAG,@ReturnFromQC
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@TAG,'Return From QC',system_user,getdate(),@ReturnFromQC)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor
    END 
END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblSolorun_Log_QCReleased'
			)
BEGIN
	DROP TRIGGER tr_tblSolorun_Log_QCReleased
END
GO
CREATE TRIGGER [dbo].[tr_tblSolorun_Log_QCReleased]
   ON [dbo].[tblSolorun]
   FOR UPDATE
AS BEGIN
    SET NOCOUNT ON;
    IF UPDATE (TR_Loop_Folder_QC_Release) 
    BEGIN

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT inserted.FolderName as Tag,inserted.TR_Loop_Folder_QC_Release from inserted
		inner join deleted on inserted.Id = deleted.Id
		DECLARE @TAG NVARCHAR(50)
		DECLARE @L_FinalApproval DATE
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @TAG,@L_FinalApproval
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @TAG,@L_FinalApproval
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@TAG,'QC Released',system_user,getdate(),@L_FinalApproval)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor
    END 
END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblSolorun_Log_HCSFApproved'
			)
BEGIN
	DROP TRIGGER tr_tblSolorun_Log_HCSFApproved
END
GO
CREATE TRIGGER [dbo].[tr_tblSolorun_Log_HCSFApproved]
   ON [dbo].[tblSolorun]
   FOR UPDATE
AS BEGIN
    SET NOCOUNT ON;
    IF UPDATE (L_FinalApproval) 
    BEGIN

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT inserted.FolderName as Tag,inserted.L_FinalApproval from inserted
		inner join deleted on inserted.Id = deleted.Id
		DECLARE @TAG NVARCHAR(50)
		DECLARE @L_FinalApproval DATE
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @TAG,@L_FinalApproval
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @TAG,@L_FinalApproval
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@TAG,'Folder Approved',system_user,getdate(),@L_FinalApproval)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor
    END 
END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblSolorun_Log_FolderReady'
			)
BEGIN
	DROP TRIGGER tr_tblSolorun_Log_FolderReady
END
GO
CREATE TRIGGER [dbo].[tr_tblSolorun_Log_FolderReady]
   ON [dbo].[tblSolorun]
   FOR UPDATE
AS BEGIN
    SET NOCOUNT ON;
    IF UPDATE (HCS_Folder_Ready) 
    BEGIN

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT inserted.FolderName as Tag,inserted.HCS_Folder_Ready from inserted
		inner join deleted on inserted.Id = deleted.Id
		DECLARE @TAG NVARCHAR(50)
		DECLARE @L_FinalApproval DATE
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @TAG,@L_FinalApproval
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @TAG,@L_FinalApproval
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@TAG,'Folder Ready',system_user,getdate(),@L_FinalApproval)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor
    END 
END
GO
IF EXISTS (SELECT 1 FROM sys.triggers 
			WHERE name = 'tr_tblSolorun_Log_DONE'
			)
BEGIN
	DROP TRIGGER tr_tblSolorun_Log_DONE
END
GO
CREATE TRIGGER [dbo].[tr_tblSolorun_Log_DONE]
   ON [dbo].[tblSolorun]
   AFTER UPDATE
AS BEGIN
    SET NOCOUNT ON;
    IF UPDATE (L_Done) 
    BEGIN

		DECLARE Log_cursor CURSOR FORWARD_ONLY FOR
		SELECT inserted.FolderName,inserted.L_Done from inserted
		DECLARE @TAG NVARCHAR(50)
		DECLARE @OLDVALUE DATE
		OPEN Log_cursor
		FETCH NEXT FROM Log_cursor INTO @TAG,@OLDVALUE
		WHILE @@FETCH_STATUS = 0  
			BEGIN
				FETCH NEXT FROM Log_cursor INTO @TAG,@OLDVALUE
				insert into tblSolorun_Log ([Tag], [Step_Name], [uname], [udate],uvalue)
				values (@TAG,'Loop Done Updated',system_user,getdate(),@OLDVALUE)
			END
		CLOSE Log_cursor
		DEALLOCATE Log_cursor
    END 
END
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetLog'
			AND schema_id = (select schema_id from sys.schemas where name = 'MOTORS')
			)
BEGIN
	DROP PROC MOTORS.GetLog
END
GO
CREATE PROC [MOTORS].[GetLog]
AS
SELECT [Tag] AS Folder
      ,[Step_Name] AS Action
      ,[uname] AS [Action By]
      ,[udate] [Action On]
      ,[uvalue] [Changed To]
  FROM [dbo].[tblSolorun_Log]
  ORDER BY udate
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'U' 
			AND name = 'SolorunTemp'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP TABLE TEMPDATA.SolorunTemp
END
GO
CREATE TABLE [TEMPDATA].[SolorunTemp](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Tag] [nvarchar](250) NULL,
	[Type] [nvarchar](250) NULL,
	[Subtype] [nvarchar](250) NULL,
	[Area] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Vendor] [nvarchar](250) NULL,
	[Subsystem] [nvarchar](250) NULL,
	[ActId] [nvarchar](250) NULL,
	[StartDate] [date] NULL,
	[FinishDate] [date] NULL,
	[Progress] [float] NULL,
	[FolderPreparation] [date] NULL,
	[ConstrRelease] [date] NULL,
	[QCRelease] [date] NULL,
	[FolderReady] [date] NULL,
	[SubmittedToPrecom] [date] NULL,
	[Done] [date] NULL,
	[FinalApproval] [date] NULL,
	[Active] [bit] NULL,
	[ReportedBy] [nvarchar](250) NULL,
	[OpKey] [nvarchar](250) NULL,
	[UpdateType] [nvarchar](50) NULL,
	[Error] [nvarchar](100) NULL,
	[ReturnFromQC] [date] NULL,
	[SubmitToQC] [date] NULL,
	[Priority] [nvarchar](50) NULL,
	[PDSModel] [nvarchar](100) NULL,
    PRIMARY KEY (Id)
)
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UpdateSolorunNoOverwrite'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.UpdateSolorunNoOverwrite
END
GO
CREATE PROC [TEMPDATA].[UpdateSolorunNoOverwrite]
@opKey NVARCHAR(250),
@date DATE = NULL

AS

--CHECK ERRORs
UPDATE V
    SET Error = 'Loop Not Exists'
FROM (
    SELECT
    Tag, temp.Error
    FROM TEMPDATA.SolorunTemp AS temp
    LEFT JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
    WHERE UpdateType = 'UPDATEPROGRESS' AND tblSolorun.FolderName IS NULL
    AND temp.OpKey = @opKey
) AS V
--

IF @date IS NOT NULL
    BEGIN
        --FolderPreparation
        UPDATE V
                SET Folder_Preparation = @date
        FROM (
            SELECT
            Tag, tblSolorun.Folder_Preparation
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE 
                UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
                AND tblSolorun.Folder_Preparation IS NULL
                AND temp.OpKey = @opKey
        ) AS V
        --ConstrRelease
        UPDATE V
                SET L_Constr_Release = @date
        FROM (
            SELECT
            Tag, tblSolorun.L_Constr_Release
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE 
                UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
                AND tblSolorun.L_Constr_Release IS NULL
                AND temp.OpKey = @opKey
        ) AS V
        --QCRelease
        UPDATE V
                SET TR_Loop_Folder_QC_Release = @date
        FROM (
            SELECT
            Tag, tblSolorun.TR_Loop_Folder_QC_Release
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE 
                UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
                AND tblSolorun.TR_Loop_Folder_QC_Release IS NULL
                AND temp.OpKey = @opKey
        ) AS V
        --FolderReady
        UPDATE V
                SET HCS_Folder_Ready = @date
        FROM (
            SELECT
            Tag, tblSolorun.HCS_Folder_Ready
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE 
                UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
                AND tblSolorun.HCS_Folder_Ready IS NULL
                AND temp.OpKey = @opKey
        ) AS V
        --SubmittedToPrecom
        UPDATE V
                SET Submitted_to_Precom = @date
        FROM (
            SELECT
            Tag, tblSolorun.Submitted_to_Precom
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE 
                UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
                AND tblSolorun.Submitted_to_Precom IS NULL
                AND temp.OpKey = @opKey
        ) AS V
        --Done
        UPDATE V
                SET L_Done = @date
        FROM (
            SELECT
            Tag, tblSolorun.L_Done
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE 
                UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
                AND tblSolorun.L_Done IS NULL
                AND temp.OpKey = @opKey
        ) AS V
        --FinalApproval
        UPDATE V
                SET L_FinalApproval = @date
        FROM (
            SELECT
            Tag, tblSolorun.L_FinalApproval
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE 
                UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
                AND tblSolorun.L_FinalApproval IS NULL
                AND temp.OpKey = @opKey
        ) AS V
        --FolderPreparation
        UPDATE V
                SET SubmitToQC = @date
        FROM (
            SELECT
            Tag, tblSolorun.SubmitToQC
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE 
                UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
                AND tblSolorun.SubmitToQC IS NULL
                AND temp.OpKey = @opKey
        ) AS V
        --Return From QC
        UPDATE V
                SET ReturnFromQC = @date
        FROM (
            SELECT
            Tag, tblSolorun.ReturnFromQC
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE 
                UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
                AND tblSolorun.ReturnFromQC IS NULL
                AND temp.OpKey = @opKey
        ) AS V

    END
ELSE
    BEGIN
        --FolderPreparation
        UPDATE V
                SET Folder_Preparation = FolderPreparation
        FROM (
            SELECT
            Tag, 
            CASE WHEN FolderPreparation IS NOT NULL THEN @date ELSE NULL END AS FolderPreparation, 
            tblSolorun.Folder_Preparation
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
            AND tblSolorun.Folder_Preparation IS NULL
            AND temp.OpKey = @opKey
        ) AS V
        --ConstrRelease
        UPDATE V
                SET L_Constr_Release = ConstrRelease
        FROM (
            SELECT
            Tag, 
            CASE WHEN ConstrRelease IS NOT NULL THEN @date ELSE NULL END AS ConstrRelease, 
            tblSolorun.L_Constr_Release
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
            AND tblSolorun.L_Constr_Release IS NULL
            AND temp.OpKey = @opKey
        ) AS V
        --QCRelease
        UPDATE V
                SET TR_Loop_Folder_QC_Release = QCRelease
        FROM (
            SELECT
            Tag, 
            CASE WHEN QCRelease IS NOT NULL THEN @date ELSE NULL END AS QCRelease, 
            tblSolorun.TR_Loop_Folder_QC_Release
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
            AND tblSolorun.TR_Loop_Folder_QC_Release IS NULL
            AND temp.OpKey = @opKey
        ) AS V
        --FolderReady
        UPDATE V
                SET HCS_Folder_Ready = FolderReady
        FROM (
            SELECT
            Tag, 
            CASE WHEN FolderReady IS NOT NULL THEN @date ELSE NULL END AS FolderReady, 
            tblSolorun.HCS_Folder_Ready
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
            AND tblSolorun.HCS_Folder_Ready IS NULL
            AND temp.OpKey = @opKey
        ) AS V
        --SubmittedToPrecom
        UPDATE V
                SET Submitted_to_Precom = SubmittedToPrecom
        FROM (
            SELECT
            Tag, 
            CASE WHEN SubmittedToPrecom IS NOT NULL THEN @date ELSE NULL END AS SubmittedToPrecom, 
            tblSolorun.Submitted_to_Precom
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
            AND tblSolorun.Submitted_to_Precom IS NULL
            AND temp.OpKey = @opKey
        ) AS V
        --Done
        UPDATE V
                SET l_Done = Done
        FROM (
            SELECT
            Tag, 
            CASE WHEN ((Done IS NOT NULL) OR (Progress > 0)) THEN @date ELSE NULL END AS Done, 
            tblSolorun.l_Done
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
            AND tblSolorun.l_Done IS NULL
            AND temp.OpKey = @opKey
        ) AS V
        --FinalApproval
        UPDATE V
                SET L_FinalApproval = FinalApproval
        FROM (
            SELECT
            Tag, 
            CASE WHEN FinalApproval IS NOT NULL THEN @date ELSE NULL END AS FinalApproval,
            tblSolorun.L_FinalApproval
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
            AND tblSolorun.L_FinalApproval IS NULL
            AND temp.OpKey = @opKey
        ) AS V
        --Submit To QC
        UPDATE V
                SET lSubmitToQC = SubmitToQC
        FROM (
            SELECT
            Tag, 
            CASE WHEN temp.SubmitToQC IS NOT NULL THEN @date ELSE NULL END AS SubmitToQC,
            tblSolorun.SubmitToQC AS lSubmitToQC
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
            AND tblSolorun.SubmitToQC IS NULL
            AND temp.OpKey = @opKey
        ) AS V
        --Return From QC
        UPDATE V
                SET lReturnFromQC = ReturnFromQC
        FROM (
            SELECT
            Tag, 
            CASE WHEN temp.ReturnFromQC IS NOT NULL THEN @date ELSE NULL END AS ReturnFromQC,
            tblSolorun.ReturnFromQC AS lReturnFromQC
            FROM TEMPDATA.SolorunTemp AS temp
            INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
            WHERE UpdateType = 'UPDATEPROGRESS' AND Error IS NULL
            AND tblSolorun.ReturnFromQC IS NULL
            AND temp.OpKey = @opKey
        ) AS V
    END
GO
IF NOT EXISTS(SELECT 1 FROM sys.columns 
          WHERE Name = N'SolorunIntegrity'
          AND Object_ID = Object_ID(N'dbo.AppSettings'))
BEGIN
    ALTER TABLE dbo.AppSettings
    ADD SolorunIntegrity BIT NOT NULL DEFAULT 0
END
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'CheckSolorunIntgerity'
			AND schema_id = (select schema_id from sys.schemas where name = 'dbo')
			)
BEGIN
	DROP PROC dbo.CheckSolorunIntgerity
END
GO
CREATE PROC [dbo].[CheckSolorunIntgerity]
AS
IF (SELECT SolorunIntegrity FROM dbo.AppSettings) = 1
    BEGIN
        UPDATE tblSolorun
            SET L_Done = L_FinalApproval
        WHERE L_Done IS NULL AND L_FinalApproval IS NOT NULL

        UPDATE tblSolorun
            SET Submitted_to_Precom = L_Done
        WHERE Submitted_to_Precom IS NULL AND L_Done IS NOT NULL

        UPDATE tblSolorun
            SET HCS_Folder_Ready = Submitted_to_Precom
        WHERE HCS_Folder_Ready IS NULL AND Submitted_to_Precom IS NOT NULL

        UPDATE tblSolorun
            SET TR_Loop_Folder_QC_Release = HCS_Folder_Ready
        WHERE TR_Loop_Folder_QC_Release IS NULL AND HCS_Folder_Ready IS NOT NULL

        UPDATE tblSolorun
            SET L_Constr_Release = TR_Loop_Folder_QC_Release
        WHERE L_Constr_Release IS NULL AND TR_Loop_Folder_QC_Release IS NOT NULL

        UPDATE tblSolorun
            SET ReturnFromQC = Submitted_to_Precom
        WHERE ReturnFromQC IS NULL AND Submitted_to_Precom IS NOT NULL

        UPDATE tblSolorun
            SET SubmitToQC = ReturnFromQC
        WHERE SubmitToQC IS NULL AND ReturnFromQC IS NOT NULL
        
        UPDATE tblSolorun
            SET Folder_Preparation = SubmitToQC
        WHERE Folder_Preparation IS NULL AND SubmitToQC IS NOT NULL

        UPDATE V
            SET V.Installed_date = V.TR_Loop_Folder_QC_Release
        FROM (
            SELECT
                tblMotor.Installed_date, tblMotor.Tag,
                tblSolorun.TR_Loop_Folder_QC_Release
            FROM tblMotor
            INNER JOIN tblSolorun ON tblMotor.Tag = tblSolorun.FolderName
            WHERE 
                (tblSolorun.TR_Loop_Folder_QC_Release IS NOT NULL) 
            AND (tblMotor.Installed_date IS NULL)
        ) AS V

    END
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetResultsSolorun'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.GetResultsSolorun
END
GO
CREATE PROC [TEMPDATA].[GetResultsSolorun]
@opKey NVARCHAR(250)
AS
SELECT
*
FROM TEMPDATA.SolorunTemp
WHERE OpKey = @opKey

EXEC dbo.CheckLoopIntgerity

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UpdateSolorunBasicData'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.UpdateSolorunBasicData
END
GO
CREATE PROC [TEMPDATA].[UpdateSolorunBasicData]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = ''
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = 'SETASNULL'

--UPDATE Errors (Solorun Does Not Exist)
UPDATE V
	SET Error = 'Solorun Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.SolorunTemp AS temp
		LEFT JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND tblSolorun.FolderName IS NULL
) AS V

--UPDATE Errors (Area Does Not Exist)
UPDATE V
	SET Error = 'Area Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.SolorunTemp AS temp
		LEFT JOIN Area ON temp.Area = Area.Area
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.Area <> 'NOUPDATE' AND Area.Area IS NULL
) AS V

--UPDATE Errors (Activitiy ID Does Not Exist)
UPDATE V
	SET Error = 'Activitiy ID Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.SolorunTemp AS temp
		LEFT JOIN tblActIDS ON temp.ActId = tblActIDS.ActID
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.ActId NOT IN ('NOUPDATE', 'SETASNULL') AND tblActIDS.ActID IS NULL
) AS V

--UPDATE DESCRIPTION
UPDATE V
	SET L_Description = DESCRIPTION
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.DESCRIPTION = 'SETASNULL' THEN NULL ELSE temp.DESCRIPTION END AS DESCRIPTION,
		tblSolorun.L_Description
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.DESCRIPTION <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Vendor
UPDATE V
	SET L_Vendor = Vendor
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Vendor = 'SETASNULL' THEN NULL ELSE temp.Vendor END AS Vendor,
		tblSolorun.Vendor AS L_Vendor
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Vendor <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subsystem
UPDATE V
	SET L_Subsystem = Subsystem
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subsystem = 'SETASNULL' THEN NULL ELSE temp.Subsystem END AS Subsystem,
		tblSolorun.Subsystem AS L_Subsystem
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subsystem <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Area
UPDATE V
	SET L_Area = Area
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Area = 'SETASNULL' THEN NULL ELSE temp.Area END AS Area,
		tblSolorun.Area AS L_Area
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Area <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Type
UPDATE V
	SET L_Type = Type
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Type = 'SETASNULL' THEN NULL ELSE temp.Type END AS Type,
		tblSolorun.L_Type
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.[Type] <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subtype
UPDATE V
	SET Sub_Type = Subtype
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subtype = 'SETASNULL' THEN NULL ELSE temp.Subtype END AS Subtype,
		tblSolorun.Sub_Type
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subtype <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE ActId
UPDATE V
	SET ACTIVITYID = ActId
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.ActId = 'SETASNULL' THEN NULL ELSE temp.ActId END AS ActId,
		tblSolorun.ACTIVITYID
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.ActId <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE Start Date
UPDATE V
	SET Planning_START_Date = StartDate
FROM (
	SELECT
		temp.Tag,
		temp.StartDate AS StartDate,
		tblSolorun.Planning_START_Date
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.StartDate <> '1/1/1900') OR (temp.StartDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Finish Date
UPDATE V
	SET Planning_FINISH_Date = FinishDate
FROM (
	SELECT
		temp.Tag,
		temp.FinishDate AS FinishDate,
		tblSolorun.Planning_FINISH_Date
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.FinishDate <> '1/1/1900') OR (temp.FinishDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Active
UPDATE V
	SET Active = TempActive
FROM (
	SELECT
		temp.Tag,
		temp.Active AS [TempActive],
		tblSolorun.Active
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Active IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE Priority
UPDATE V
	SET FolderPriority = CONVERT(INT,TempPriority)
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Priority = 'SETASNULL' THEN NULL ELSE temp.Priority END AS TempPriority,
		tblSolorun.FolderPriority
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Priority IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE PDSModel
UPDATE V
	SET LModel = PDSModel
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.PDSModel = 'SETASNULL' THEN NULL ELSE temp.PDSModel END AS PDSModel,
		tblSolorun.PDSModel AS LModel
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.PDSModel IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--------------------------------------------------------------------------------------------------------------------------

--UPDATE Loop Printed
UPDATE V
	SET Folder_Preparation = FolderPreparation
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblSolorun.Folder_Preparation
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPPRINTED' AND Error IS NULL AND temp.FolderPreparation IS NOT NULL AND tblSolorun.Folder_Preparation IS NULL
		AND temp.OpKey = @opKey
) AS V

--CLear Loop Printed
UPDATE V
	SET Folder_Preparation = NULL,
        SubmitToQC = NULL,
        ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblSolorun.Folder_Preparation, tblSolorun.SubmitToQC, tblSolorun.ReturnFromQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPPRINTED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V

--====================================================================

--UPDATE QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = QCRelease
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblSolorun.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPQCRELEASED' AND Error IS NULL AND temp.QCRelease IS NOT NULL AND tblSolorun.TR_Loop_Folder_QC_Release IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = NULL
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblSolorun.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPQCRELEASED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Folder Ready
UPDATE V
	SET HCS_Folder_Ready = FolderReady
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblSolorun.HCS_Folder_Ready
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERREADY' AND Error IS NULL AND temp.FolderReady IS NOT NULL AND tblSolorun.HCS_Folder_Ready IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Folder Ready
UPDATE V
	SET HCS_Folder_Ready = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblSolorun.HCS_Folder_Ready
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERREADY' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = SubmittedToPrecom
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblSolorun.Submitted_to_Precom
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL AND temp.SubmittedToPrecom IS NOT NULL AND tblSolorun.Submitted_to_Precom IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = NULL
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblSolorun.Submitted_to_Precom
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Done
UPDATE V
	SET L_Done = Done
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblSolorun.L_Done
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERDONE' AND Error IS NULL AND temp.Done IS NOT NULL AND tblSolorun.L_Done IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Loop Done
UPDATE V
	SET L_Done = NULL
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblSolorun.L_Done
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERDONE' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Approved
UPDATE V
	SET L_FinalApproval = FinalApproval
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblSolorun.L_FinalApproval
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERAPPROVED' AND Error IS NULL AND temp.FinalApproval IS NOT NULL AND tblSolorun.L_FinalApproval IS NULL
		AND temp.OpKey = @opKey
) AS V
--Clear Loop Approved
UPDATE V
	SET L_FinalApproval = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblSolorun.L_FinalApproval
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERAPPROVED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Submit to QC
UPDATE V
	SET lSubmitToQC = SubmitToQC
FROM (
	SELECT
		temp.Tag,
		temp.SubmitToQC,
		tblSolorun.SubmitToQC AS lSubmitToQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDESUBMITTOQC' AND Error IS NULL AND temp.SubmitToQC IS NOT NULL AND tblSolorun.SubmitToQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submit to QC
UPDATE V
	SET SubmitToQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblSolorun.SubmitToQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDESUBMITTOQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Return from QC
UPDATE V
	SET lReturnFromQC = ReturnFromQC
FROM (
	SELECT
		temp.Tag,
		temp.ReturnFromQC,
		tblSolorun.ReturnFromQC AS lReturnFromQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERRETURNFROMQC' AND Error IS NULL AND temp.ReturnFromQC IS NOT NULL AND tblSolorun.ReturnFromQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Return from QC
UPDATE V
	SET ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblSolorun.ReturnFromQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERRETURNFROMQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

SELECT
CASE WHEN [Error] IS NULL THEN 'Updated With No Error' ELSE [Error] END AS [Error], 
Id, Tag, Type, Subtype, Area, [Description], Vendor, Subsystem, ActId, StartDate, FinishDate, Active, Priority, PDSModel, ReportedBy
FolderPreparation, QCRelease, SubmitToQC, FolderReady, ReturnFromQC, SubmittedToPrecom, Done, FinalApproval
FROM TEMPDATA.SolorunTemp
WHERE OpKey = @opKey

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'CreateSolorunPriorities'
			AND schema_id = (select schema_id from sys.schemas where name = 'MOTORS')
			)
BEGIN
	DROP PROC MOTORS.CreateSolorunPriorities
END
GO
CREATE PROC [MOTORS].[CreateSolorunPriorities]
AS
UPDATE V
    SET FolderPriority = Priority
FROM (
    SELECT
    DENSE_RANK() OVER (ORDER BY FORMAT(Planning_START_Date,'yyyyMM')) AS Priority,
    tblSolorun.Id AS Id,
    FolderPriority, FolderName
    FROM tblSolorun
    WHERE Planning_START_Date IS NOT NULL
) AS V
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UpdateLoopsBasicData'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.UpdateLoopsBasicData
END
GO
CREATE PROC [TEMPDATA].[UpdateLoopsBasicData]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.LoopTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = ''
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = 'SETASNULL'

--UPDATE Errors (Loop Does Not Exist)
UPDATE V
	SET Error = 'Loop Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.LoopTemp AS temp
		LEFT JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND tblInsLoop.LoopName IS NULL
) AS V

--UPDATE Errors (Area Does Not Exist)
UPDATE V
	SET Error = 'Area Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.LoopTemp AS temp
		LEFT JOIN Area ON temp.Area = Area.Area
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.Area <> 'NOUPDATE' AND Area.Area IS NULL
) AS V

--UPDATE Errors (Activitiy ID Does Not Exist)
UPDATE V
	SET Error = 'Activitiy ID Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.LoopTemp AS temp
		LEFT JOIN tblActIDS ON temp.ActId = tblActIDS.ActID
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.ActId NOT IN ('NOUPDATE', 'SETASNULL') AND tblActIDS.ActID IS NULL
) AS V

--UPDATE DESCRIPTION
UPDATE V
	SET L_Description = DESCRIPTION
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.DESCRIPTION = 'SETASNULL' THEN NULL ELSE temp.DESCRIPTION END AS DESCRIPTION,
		tblInsLoop.L_Description
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.DESCRIPTION <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Vendor
UPDATE V
	SET L_Vendor = Vendor
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Vendor = 'SETASNULL' THEN NULL ELSE temp.Vendor END AS Vendor,
		tblInsLoop.Vendor AS L_Vendor
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Vendor <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subsystem
UPDATE V
	SET L_Subsystem = Subsystem
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subsystem = 'SETASNULL' THEN NULL ELSE temp.Subsystem END AS Subsystem,
		tblInsLoop.Subsystem AS L_Subsystem
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subsystem <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Area
UPDATE V
	SET L_Area = Area
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Area = 'SETASNULL' THEN NULL ELSE temp.Area END AS Area,
		tblInsLoop.Area AS L_Area
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Area <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Type
UPDATE V
	SET L_Type = Type
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Type = 'SETASNULL' THEN NULL ELSE temp.Type END AS Type,
		tblInsLoop.L_Type
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.[Type] <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subtype
UPDATE V
	SET Sub_Type = Subtype
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subtype = 'SETASNULL' THEN NULL ELSE temp.Subtype END AS Subtype,
		tblInsLoop.Sub_Type
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subtype <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE ActId
UPDATE V
	SET ACTIVITYID = ActId
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.ActId = 'SETASNULL' THEN NULL ELSE temp.ActId END AS ActId,
		tblInsLoop.ACTIVITYID
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.ActId <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE Start Date
UPDATE V
	SET Planning_START_Date = StartDate
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.StartDate = '1/1/0001' THEN NULL ELSE temp.StartDate END AS StartDate,
		tblInsLoop.Planning_START_Date
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.StartDate <> '1/1/1900') OR (temp.StartDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Finish Date
UPDATE V
	SET Planning_FINISH_Date = FinishDate
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.FinishDate = '1/1/0001' THEN NULL ELSE temp.FinishDate END AS FinishDate,
		tblInsLoop.Planning_FINISH_Date
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.FinishDate <> '1/1/1900') OR (temp.FinishDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Active
UPDATE V
	SET Active = TempActive
FROM (
	SELECT
		temp.Tag,
		temp.Active AS [TempActive],
		tblInsLoop.Active
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Active IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE Priority
UPDATE V
	SET LoopPriority = CONVERT(INT,TempPriority)
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Priority = 'SETASNULL' THEN NULL ELSE temp.Priority END AS TempPriority,
		tblInsLoop.LoopPriority
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Priority IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE PDSModel
UPDATE V
	SET LModel = PDSModel
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.PDSModel = 'SETASNULL' THEN NULL ELSE temp.PDSModel END AS PDSModel,
		tblInsLoop.PDSModel AS LModel
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.PDSModel IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--------------------------------------------------------------------------------------------------------------------------

--UPDATE Loop Printed
UPDATE V
	SET Folder_Preparation = FolderPreparation
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblInsLoop.Folder_Preparation
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPPRINTED' AND Error IS NULL AND temp.FolderPreparation IS NOT NULL AND tblInsLoop.Folder_Preparation IS NULL
		AND temp.OpKey = @opKey
) AS V

--CLear Loop Printed
UPDATE V
	SET Folder_Preparation = NULL,
        SubmitToQC = NULL,
        ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblInsLoop.Folder_Preparation, tblInsLoop.SubmitToQC, tblInsLoop.ReturnFromQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPPRINTED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V

--====================================================================

--UPDATE QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = QCRelease
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblInsLoop.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPQCRELEASED' AND Error IS NULL AND temp.QCRelease IS NOT NULL AND tblInsLoop.TR_Loop_Folder_QC_Release IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = NULL
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblInsLoop.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPQCRELEASED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Folder Ready
UPDATE V
	SET HCS_Folder_Ready = FolderReady
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblInsLoop.HCS_Folder_Ready
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERREADY' AND Error IS NULL AND temp.FolderReady IS NOT NULL AND tblInsLoop.HCS_Folder_Ready IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Folder Ready
UPDATE V
	SET HCS_Folder_Ready = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblInsLoop.HCS_Folder_Ready
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERREADY' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = SubmittedToPrecom
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblInsLoop.Submitted_to_Precom
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL AND temp.SubmittedToPrecom IS NOT NULL AND tblInsLoop.Submitted_to_Precom IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = NULL
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblInsLoop.Submitted_to_Precom
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Done
UPDATE V
	SET L_Done = Done
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblInsLoop.L_Done
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERDONE' AND Error IS NULL AND temp.Done IS NOT NULL AND tblInsLoop.L_Done IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Loop Done
UPDATE V
	SET L_Done = NULL
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblInsLoop.L_Done
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERDONE' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Approved
UPDATE V
	SET L_FinalApproval = FinalApproval
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblInsLoop.L_FinalApproval
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERAPPROVED' AND Error IS NULL AND temp.FinalApproval IS NOT NULL AND tblInsLoop.L_FinalApproval IS NULL
		AND temp.OpKey = @opKey
) AS V
--Clear Loop Approved
UPDATE V
	SET L_FinalApproval = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblInsLoop.L_FinalApproval
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERAPPROVED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Submit to QC
UPDATE V
	SET lSubmitToQC = SubmitToQC
FROM (
	SELECT
		temp.Tag,
		temp.SubmitToQC,
		tblInsLoop.SubmitToQC AS lSubmitToQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDESUBMITTOQC' AND Error IS NULL AND temp.SubmitToQC IS NOT NULL AND tblInsLoop.SubmitToQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submit to QC
UPDATE V
	SET SubmitToQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblInsLoop.SubmitToQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDESUBMITTOQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Return from QC
UPDATE V
	SET lReturnFromQC = ReturnFromQC
FROM (
	SELECT
		temp.Tag,
		temp.ReturnFromQC,
		tblInsLoop.ReturnFromQC AS lReturnFromQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERRETURNFROMQC' AND Error IS NULL AND temp.ReturnFromQC IS NOT NULL AND tblInsLoop.ReturnFromQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Return from QC
UPDATE V
	SET ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblInsLoop.ReturnFromQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERRETURNFROMQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

SELECT
CASE WHEN [Error] IS NULL THEN 'Updated With No Error' ELSE [Error] END AS [Error], 
Id, Tag, Type, Subtype, Area, [Description], Vendor, Subsystem, ActId, 
CASE WHEN StartDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE StartDate END AS StartDate,
CASE WHEN FinishDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE FinishDate END AS FinishDate,
Active, Priority, PDSModel, ReportedBy,
FolderPreparation, QCRelease, SubmitToQC, FolderReady, ReturnFromQC, SubmittedToPrecom, Done, FinalApproval
FROM TEMPDATA.LoopTemp
WHERE OpKey = @opKey

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetLoopsHCS'
			AND schema_id = (select schema_id from sys.schemas where name = 'LOOPS')
			)
BEGIN
	DROP PROC LOOPS.GetLoopsHCS
END
GO
CREATE PROC [LOOPS].[GetLoopsHCS]
AS
WITH LoopsData AS (

SELECT DISTINCT [TBL_ID] AS Id
	  ,Area
      ,[LoopName] As [Loop Name]
	  ,L_Description AS [Description]
      ,[L_Type] As [Type]
      ,[Sub_Type] AS [Sub Type]
	  ,[Subsystem]
	  ,[Subcontractor]
      ,[Vendor]
	  
	  ,L_Constr_Release AS [Cons Complete]
	  ,TR_Loop_Folder_QC_Release AS [QC Released]
      ,[Folder_Preparation] AS [Folder Printed]
      ,SubmitToQC AS [Submitted To QC]
	  ,HCS_Folder_Ready AS [Folder Ready QC]
      ,ReturnFromQC AS [Return From QC]
	  ,Submitted_to_Precom AS [Submitted To Precomm]
	  ,L_Done AS [Done]
	  ,L_FinalApproval AS [Final Approval]
      
	  ,CASE WHEN L_FinalApproval IS NOT NULL THEN 'Loop Done'
		WHEN L_Done IS NOT NULL THEN 'Loop Done'
		WHEN Submitted_to_Precom IS NOT NULL THEN 'Submitted To Pre-Comm'
		WHEN ReturnFromQC IS NOT NULL THEN 'Returned From QC'
		WHEN HCS_Folder_Ready IS NOT NULL THEN 'Folder Ready'
		WHEN SubmitToQC IS NOT NULL THEN 'Submitted To QC'
        WHEN [Folder_Preparation] IS NOT NULL THEN 'Folder Printed'
		WHEN TR_Loop_Folder_QC_Release IS NOT NULL THEN 'QC Released'
		WHEN L_Constr_Release IS NOT NULL THEN 'Construction Complete'
		ELSE 'Not Ready'
		END AS [Folder Status]
		,LoopPriority
		,tblProject.Pro_Title AS [Project]
		--,[qrCode] AS QRCode
		,tblInsLoop.ProUUID 
        ,tblInsLoop.PDSModel
        ,tblInsLoop.Planning_START_Date AS [Plan Start Date]
        ,tblInsLoop.Planning_FINISH_Date AS [Plan Finish Date]
  FROM [tblInsLoop] WITH (NOLOCK)
  INNER JOIN tblProject ON [tblInsLoop].ProUUID = tblProject.UUID
  WHERE [tblInsLoop].Active = 1
)

SELECT DISTINCT
CASE WHEN LOOPS.tblLoopsCons.isClosed = 0 THEN 'Yes' ELSE 'No' END AS [Has Blockage]
,LoopsData.*

FROM LoopsData
LEFT JOIN LOOPS.tblLoopsCons WITH (NOLOCK) ON LoopsData.Id = LOOPS.tblLoopsCons.loopId
GO
IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS 
			WHERE CONSTRAINT_NAME ='FK_Area_tblInsLoop'
			)
BEGIN
	ALTER TABLE dbo.tblInsLoop
    DROP CONSTRAINT FK_Area_tblInsLoop;
END
GO

IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UploadLoopsBasicData'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.UploadLoopsBasicData
END
GO
CREATE PROC [TEMPDATA].[UploadLoopsBasicData]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.LoopTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = ''
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = 'SETASNULL'

--UPDATE Errors (Loop Does Exist)
UPDATE V
	SET Error = 'Loop Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE Errors (Area Does Not Exist)
UPDATE V
	SET Error = 'Area Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.LoopTemp AS temp
		LEFT JOIN Area ON temp.Area = Area.Area
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.Area <> 'NOUPDATE' AND Area.Area IS NULL
) AS V

--UPDATE Errors (Activitiy ID Does Not Exist)
UPDATE V
	SET Error = 'Activitiy ID Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.LoopTemp AS temp
		LEFT JOIN tblActIDS ON temp.ActId = tblActIDS.ActID
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.ActId NOT IN ('NOUPDATE', 'SETASNULL') AND tblActIDS.ActID IS NULL
) AS V

--Insert to DB with no Error

INSERT INTO dbo.tblInsLoop (LoopName, [L_Type], Sub_Type, Area, [L_Description], Vendor, Subsystem, ACTIVITYID, Planning_START_Date, Planning_FINISH_Date, LoopPriority, PDSModel, Active)
SELECT 
Tag, 
CASE WHEN [Type] IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE [Type] END AS [Type], 
CASE WHEN Subtype IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Subtype END AS Subtype, 
CASE WHEN Area IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Area END AS Area, 
CASE WHEN [Description] IN ('NOUPDATE', 'SETASNULL') THEN  NULL ELSE [Description] END AS [Description] , 
CASE WHEN Vendor IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Vendor END AS Vendor, 
CASE WHEN Subsystem IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Subsystem END AS Subsystem, 
CASE WHEN ActId IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE ActId END AS ActId, 
CASE WHEN StartDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE StartDate END AS StartDate, 
CASE WHEN FinishDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE FinishDate END AS FinishDate, 
Priority, PDSModel,
1
FROM TEMPDATA.LoopTemp
WHERE OpKey = @opKey AND [Error] IS NULL
--===========================================


SELECT
CASE WHEN [Error] IS NULL THEN 'Updated With No Error' ELSE [Error] END AS [Error], 
Id, Tag, Type, Subtype, Area, [Description], Vendor, Subsystem, ActId, 
CASE WHEN StartDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE StartDate END AS StartDate, 
CASE WHEN FinishDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE FinishDate END AS FinishDate, 
Active,
Priority, PDSModel, ReportedBy
FolderPreparation, QCRelease, SubmitToQC, FolderReady, ReturnFromQC, SubmittedToPrecom, Done, FinalApproval
FROM TEMPDATA.LoopTemp
WHERE OpKey = @opKey

GO

IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'DeleteLoop'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.DeleteLoop
END
GO
CREATE PROC [TEMPDATA].[DeleteLoop]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.LoopTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = ''
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = 'SETASNULL'



--Delete

DELETE FROM dbo.tblInsLoop WHERE LoopName IN (
	SELECT 
	TEMPDATA.LoopTemp.Tag
	FROM TEMPDATA.LoopTemp
	WHERE OpKey = @opKey AND [Error] IS NULL
)

--===========================================

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UploadSolorunsBasicData'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.UploadSolorunsBasicData
END
GO
CREATE PROC [TEMPDATA].[UploadSolorunsBasicData]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = ''
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = 'SETASNULL'

--UPDATE Errors (Motor Does Exist)
UPDATE V
	SET Error = 'Motor Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE Errors (Area Does Not Exist)
UPDATE V
	SET Error = 'Area Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.SolorunTemp AS temp
		LEFT JOIN Area ON temp.Area = Area.Area
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.Area <> 'NOUPDATE' AND Area.Area IS NULL
) AS V

--UPDATE Errors (Activitiy ID Does Not Exist)
UPDATE V
	SET Error = 'Activitiy ID Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.SolorunTemp AS temp
		LEFT JOIN tblActIDS ON temp.ActId = tblActIDS.ActID
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.ActId NOT IN ('NOUPDATE', 'SETASNULL') AND tblActIDS.ActID IS NULL
) AS V

--Insert to DB with no Error

INSERT INTO dbo.tblSolorun (FolderName, [L_Type], Sub_Type, Area, [L_Description], Vendor, Subsystem, ACTIVITYID, Planning_START_Date, Planning_FINISH_Date, FolderPriority, PDSModel, Active)
SELECT 
Tag, 
CASE WHEN [Type] IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE [Type] END AS [Type], 
CASE WHEN Subtype IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Subtype END AS Subtype, 
CASE WHEN Area IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Area END AS Area, 
CASE WHEN [Description] IN ('NOUPDATE', 'SETASNULL') THEN  NULL ELSE [Description] END AS [Description] , 
CASE WHEN Vendor IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Vendor END AS Vendor, 
CASE WHEN Subsystem IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Subsystem END AS Subsystem, 
CASE WHEN ActId IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE ActId END AS ActId, 
CASE WHEN StartDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE StartDate END AS StartDate, 
CASE WHEN FinishDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE FinishDate END AS FinishDate, 
Priority, PDSModel,
1
FROM TEMPDATA.SolorunTemp
WHERE OpKey = @opKey AND [Error] IS NULL
--===========================================


SELECT
CASE WHEN [Error] IS NULL THEN 'Updated With No Error' ELSE [Error] END AS [Error], 
Id, Tag, Type, Subtype, Area, [Description], Vendor, Subsystem, ActId, 
CASE WHEN StartDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE StartDate END AS StartDate, 
CASE WHEN FinishDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE FinishDate END AS FinishDate, 
Active,
Priority, PDSModel, ReportedBy
FolderPreparation, QCRelease, SubmitToQC, FolderReady, ReturnFromQC, SubmittedToPrecom, Done, FinalApproval
FROM TEMPDATA.SolorunTemp
WHERE OpKey = @opKey

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'ChangeLoopStatus'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.ChangeLoopStatus
END
GO
CREATE PROC [TEMPDATA].[ChangeLoopStatus]
@opKey NVARCHAR(250),
@status BIT

AS

--Clean
DELETE FROM TEMPDATA.LoopTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = ''
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = 'SETASNULL'



--Update

UPDATE V
	SET v.Active = @status
FROM (
	SELECT 
	dbo.tblInsLoop.LoopName, dbo.tblInsLoop.Active
	FROM dbo.tblInsLoop
	INNER JOIN TEMPDATA.LoopTemp ON  dbo.tblInsLoop.LoopName = TEMPDATA.LoopTemp.Tag
	WHERE OpKey = @opKey AND [Error] IS NULL
) AS V
--===========================================

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'ChangeSolorunStatus'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.ChangeSolorunStatus
END
GO
CREATE PROC [TEMPDATA].[ChangeSolorunStatus]
@opKey NVARCHAR(250),
@status BIT

AS

--Clean
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = ''
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = 'SETASNULL'



--Update

UPDATE V
	SET v.Active = @status
FROM (
	SELECT 
	dbo.tblSolorun.FolderName, dbo.tblSolorun.Active
	FROM dbo.tblSolorun
	INNER JOIN TEMPDATA.SolorunTemp ON  dbo.tblSolorun.FolderName = TEMPDATA.SolorunTemp.Tag
	WHERE OpKey = @opKey AND [Error] IS NULL
) AS V
--===========================================

GO

IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'DeleteSolorun'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.DeleteSolorun
END
GO
CREATE PROC [TEMPDATA].[DeleteSolorun]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = ''
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = 'SETASNULL'



--Delete

DELETE FROM dbo.tblSolorun WHERE FolderName IN (
	SELECT 
	TEMPDATA.SolorunTemp.Tag
	FROM TEMPDATA.SolorunTemp
	WHERE OpKey = @opKey AND [Error] IS NULL
)

--===========================================

GO
ALTER TABLE tblSolorun
DROP COLUMN Area
GO
ALTER TABLE tblSolorun
ADD Area NVARCHAR(50) NULL
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UpdateMotorWithHCS'
			AND schema_id = (select schema_id from sys.schemas where name = 'HCS')
			)
BEGIN
	DROP PROC HCS.UpdateMotorWithHCS
END
GO
CREATE PROC HCS.UpdateMotorWithHCS
AS

--Update Deactivated
UPDATE V
    SET Active = 0
FROM (
    SELECT
    tblSolorun.FolderName, tblSolorun.Active
    FROM tblSolorun
    LEFT JOIN HCS.ProjectGroups AS H ON tblSolorun.FolderName = H.GroupName
    WHERE tblSolorun.Active = 1 AND H.GroupName IS NULL
) AS V

--Update Reactivated
UPDATE V
    SET Active = 1
FROM (
    SELECT
    tblSolorun.FolderName, tblSolorun.Active
    FROM tblSolorun
    INNER JOIN HCS.ProjectGroups AS H ON tblSolorun.FolderName = H.GroupName
    WHERE tblSolorun.Active = 0 AND H.[Type] LIKE '%motor%'
) AS V

--Insert New
INSERT INTO tblSolorun (FolderName, Area, Subsystem, Subcontractor, L_Description, L_Type, L_Remarks, Active)
SELECT
H.GroupName, H.Area, H.SubSystem, H.Subcontractor, H.[Description], H.[Type], 'Added From HCS Automation' AS Remarks,
1 AS Active
FROM HCS.ProjectGroups AS H
LEFT JOIN tblSolorun ON H.GroupName = tblSolorun.FolderName
WHERE H.[Type] LIKE '%motor%' AND tblSolorun.FolderName IS NULL
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UpdateLoopWithHCS'
			AND schema_id = (select schema_id from sys.schemas where name = 'HCS')
			)
BEGIN
	DROP PROC HCS.UpdateLoopWithHCS
END
GO
CREATE PROC HCS.UpdateLoopWithHCS
AS

--Update Deactivated
UPDATE V
    SET Active = 0
FROM (
    SELECT
    tblInsLoop.LoopName, tblInsLoop.Active
    FROM tblInsLoop
    LEFT JOIN HCS.ProjectGroups AS H ON tblInsLoop.LoopName = H.GroupName
    WHERE tblInsLoop.Active = 1 AND H.GroupName IS NULL
) AS V

--Update Reactivated
UPDATE V
    SET Active = 1
FROM (
    SELECT
    tblInsLoop.LoopName, tblInsLoop.Active
    FROM tblInsLoop
    INNER JOIN HCS.ProjectGroups AS H ON tblInsLoop.LoopName = H.GroupName
    WHERE tblInsLoop.Active = 0 AND H.[Type] LIKE '%loop%'
) AS V

--Insert New
INSERT INTO tblInsLoop (LoopName, Area, Subsystem, Subcontractor, L_Description, L_Type, L_Remarks, Active)
SELECT
H.GroupName, H.Area, H.SubSystem, H.Subcontractor, H.[Description], H.[Type], 'Added From HCS Automation' AS Remarks,
1 AS Active
FROM HCS.ProjectGroups AS H
LEFT JOIN tblInsLoop ON H.GroupName = tblInsLoop.LoopName
WHERE H.[Type] LIKE '%loop%' AND tblInsLoop.LoopName IS NULL
GO
