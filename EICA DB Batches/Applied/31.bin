--version12.0.8
UPDATE [dbo].[tblSettings] SET SetValue = '12.0.8' WHERE SetName = 'VERSION'
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetFoldersHCS'
			AND schema_id = (select schema_id from sys.schemas where name = 'BOXUP')
			)
BEGIN
	DROP PROC BOXUP.GetFoldersHCS
END
GO
CREATE PROC [BOXUP].[GetFoldersHCS]
AS

SELECT
CASE WHEN Constraints.folderId IS NOT NULL THEN 'Yes' ELSE 'No' END AS [Has Blockage],
BoxupData.*,
ITR.TaskCount, ITR.TaskClosed,
CASE WHEN NOT ((ITR.TaskCount IS NULL) OR (ITR.TaskCount = 0 )) THEN 
    ROUND(CONVERT(FLOAT,ITR.TaskClosed) * 100 / CONVERT(FLOAT, ITR.TaskCount), 0) 
    ELSE 100 END AS [SQMS Progress %]

FROM (
    SELECT DISTINCT tblBoxup.Id
        ,Area
        ,[FolderName] As [Folder Name]
        ,L_Description AS [Description]
        ,[L_Type] As [Type]
        ,[Sub_Type] AS [Sub Type]
        ,[Subsystem]
        ,[Subcontractor]
        ,[Vendor]
        ,ControllerLocation AS [Controller Location]
        ,L_Constr_Release AS [Cons Complete]
        ,TR_Loop_Folder_QC_Release AS [QC Released]
        ,[Folder_Preparation] AS [Folder Printed]
        ,SubmitToQC AS [Submitted To QC]
        ,HCS_Folder_Ready AS [Folder Ready QC]
        ,ReturnFromQC AS [Return From QC]
        ,Submitted_to_Precom AS [Submitted To Precomm]
        ,L_Done AS [Done]
        ,FailedDate AS [Failed Date]
        ,L_FinalApproval AS [Final Approval]
        
        ,CASE WHEN L_FinalApproval IS NOT NULL THEN 'Box Up Done'
            WHEN L_Done IS NOT NULL THEN 'Box Up Done'
            WHEN Submitted_to_Precom IS NOT NULL THEN 'Submitted To Pre-Comm'
            WHEN ReturnFromQC IS NOT NULL THEN 'Returned From QC'
            WHEN HCS_Folder_Ready IS NOT NULL THEN 'Folder Ready'
            WHEN SubmitToQC IS NOT NULL THEN 'Submitted To QC'
            WHEN [Folder_Preparation] IS NOT NULL THEN 'Folder Printed'
            WHEN TR_Loop_Folder_QC_Release IS NOT NULL THEN 'QC Released'
            WHEN L_Constr_Release IS NOT NULL THEN 'Construction Complete'
            ELSE 'Not Ready'
            END AS [Folder Status]
            ,FolderPriority
            ,tblProject.Pro_Title AS [Project]
            --,[qrCode] AS QRCode
            ,tblBoxup.ProUUID 
            ,tblBoxup.PDSModel
            ,tblBoxup.Planning_START_Date AS [Plan Start Date]
            ,tblBoxup.Planning_FINISH_Date AS [Plan Finish Date]
            ,ConsTargetDate AS [Construction Target Date]
    FROM [tblBoxup] WITH (NOLOCK)
    INNER JOIN tblProject ON [tblBoxup].ProUUID = tblProject.UUID
    WHERE [tblBoxup].Active = 1
) AS BoxupData
LEFT JOIN (
    SELECT
        BOXUP.tblFoldersCons.folderId
        FROM BOXUP.tblFoldersCons
        INNER JOIN tblBoxup ON BOXUP.tblFoldersCons.folderId = tblBoxup.Id
        WHERE BOXUP.tblFoldersCons.isClosed = 0
) AS Constraints
ON BoxupData.Id = Constraints.folderId

LEFT JOIN HCS.BoxupSQMSTasksS AS ITR ON BoxupData.[Folder Name] = ITR.FolderName COLLATE Modern_Spanish_CI_AS
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetLog'
			AND schema_id = (select schema_id from sys.schemas where name = 'BOXUP')
			)
BEGIN
	DROP PROC BOXUP.GetLog
END
GO
CREATE PROC [BoxUp].[GetLog]
AS
SELECT [Tag] AS Folder
      ,[Step_Name] AS Action
      ,[uname] AS [Action By]
      ,[udate] [Action On]
      ,[uvalue] [Changed To]
  FROM [dbo].[tblBoxup_Log]
  ORDER BY udate
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'U' 
			AND name = 'BoxupTemp'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP TABLE TEMPDATA.BoxupTemp
END
GO
CREATE TABLE [TEMPDATA].[BoxupTemp](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Tag] [nvarchar](250) NULL,
	[Type] [nvarchar](250) NULL,
	[Subtype] [nvarchar](250) NULL,
	[Area] [nvarchar](250) NULL,
	[Description] [nvarchar](250) NULL,
	[Vendor] [nvarchar](250) NULL,
	[Subsystem] [nvarchar](250) NULL,
	[ActId] [nvarchar](250) NULL,
	[StartDate] [date] NULL,
	[FinishDate] [date] NULL,
	[Progress] [float] NULL,
	[FolderPreparation] [date] NULL,
	[ConstrRelease] [date] NULL,
	[QCRelease] [date] NULL,
	[FolderReady] [date] NULL,
	[SubmittedToPrecom] [date] NULL,
	[Done] [date] NULL,
	[FinalApproval] [date] NULL,
	[Active] [bit] NULL,
	[ReportedBy] [nvarchar](250) NULL,
	[OpKey] [nvarchar](250) NULL,
	[UpdateType] [nvarchar](50) NULL,
	[Error] [nvarchar](100) NULL,
	[ReturnFromQC] [date] NULL,
	[SubmitToQC] [date] NULL,
	[Priority] [nvarchar](50) NULL,
	[PDSModel] [nvarchar](100) NULL,
	[ControllerLocation] [nvarchar](250) NULL,
	[ConsTargetDate] [date] NULL,
	[FailedDate] [date] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UpdateBoxupBasicData'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.UpdateBoxupBasicData
END
GO
CREATE PROC [TEMPDATA].[UpdateBoxupBasicData]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag = ''
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag = 'SETASNULL'

--UPDATE Errors (Solorun Does Not Exist)
UPDATE V
	SET Error = 'Solorun Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.BoxupTemp AS temp
		LEFT JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND tblBoxup.FolderName IS NULL
) AS V

--UPDATE Errors (Area Does Not Exist)
UPDATE V
	SET Error = 'Area Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.BoxupTemp AS temp
		LEFT JOIN Area ON temp.Area = Area.Area
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.Area <> 'NOUPDATE' AND Area.Area IS NULL
) AS V

--UPDATE Errors (Activitiy ID Does Not Exist)
UPDATE V
	SET Error = 'Activitiy ID Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.BoxupTemp AS temp
		LEFT JOIN tblActIDS ON temp.ActId = tblActIDS.ActID
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.ActId NOT IN ('NOUPDATE', 'SETASNULL') AND tblActIDS.ActID IS NULL
) AS V

--UPDATE DESCRIPTION
UPDATE V
	SET L_Description = DESCRIPTION
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.DESCRIPTION = 'SETASNULL' THEN NULL ELSE temp.DESCRIPTION END AS DESCRIPTION,
		tblBoxup.L_Description
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.DESCRIPTION <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Vendor
UPDATE V
	SET L_Vendor = Vendor
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Vendor = 'SETASNULL' THEN NULL ELSE temp.Vendor END AS Vendor,
		tblBoxup.Vendor AS L_Vendor
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Vendor <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subsystem
UPDATE V
	SET L_Subsystem = Subsystem
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subsystem = 'SETASNULL' THEN NULL ELSE temp.Subsystem END AS Subsystem,
		tblBoxup.Subsystem AS L_Subsystem
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subsystem <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Area
UPDATE V
	SET L_Area = Area
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Area = 'SETASNULL' THEN NULL ELSE temp.Area END AS Area,
		tblBoxup.Area AS L_Area
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Area <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Type
UPDATE V
	SET L_Type = Type
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Type = 'SETASNULL' THEN NULL ELSE temp.Type END AS Type,
		tblBoxup.L_Type
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.[Type] <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subtype
UPDATE V
	SET Sub_Type = Subtype
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subtype = 'SETASNULL' THEN NULL ELSE temp.Subtype END AS Subtype,
		tblBoxup.Sub_Type
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subtype <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE ActId
UPDATE V
	SET ACTIVITYID = ActId
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.ActId = 'SETASNULL' THEN NULL ELSE temp.ActId END AS ActId,
		tblBoxup.ACTIVITYID
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.ActId <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE Controller Location
UPDATE V
	SET ControllerLocation = NewControllerLocation
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.ControllerLocation = 'SETASNULL' THEN NULL ELSE temp.ControllerLocation END AS NewControllerLocation,
		tblBoxup.ControllerLocation
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.ControllerLocation <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE Start Date
UPDATE V
	SET Planning_START_Date = StartDate
FROM (
	SELECT
		temp.Tag,
		temp.StartDate AS StartDate,
		tblBoxup.Planning_START_Date
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.StartDate <> '1/1/1900') OR (temp.StartDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Finish Date
UPDATE V
	SET Planning_FINISH_Date = FinishDate
FROM (
	SELECT
		temp.Tag,
		temp.FinishDate AS FinishDate,
		tblBoxup.Planning_FINISH_Date
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.FinishDate <> '1/1/1900') OR (temp.FinishDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Active
UPDATE V
	SET Active = TempActive
FROM (
	SELECT
		temp.Tag,
		temp.Active AS [TempActive],
		tblBoxup.Active
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Active IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE Priority
UPDATE V
	SET FolderPriority = CONVERT(INT,TempPriority)
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Priority = 'SETASNULL' THEN NULL ELSE temp.Priority END AS TempPriority,
		tblBoxup.FolderPriority
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Priority IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE PDSModel
UPDATE V
	SET LModel = PDSModel
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.PDSModel = 'SETASNULL' THEN NULL ELSE temp.PDSModel END AS PDSModel,
		tblBoxup.PDSModel AS LModel
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.PDSModel IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--------------------------------------------------------------------------------------------------------------------------

--UPDATE Loop Printed
UPDATE V
	SET Folder_Preparation = FolderPreparation
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblBoxup.Folder_Preparation
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPPRINTED' AND Error IS NULL AND temp.FolderPreparation IS NOT NULL AND tblBoxup.Folder_Preparation IS NULL
		AND temp.OpKey = @opKey
) AS V

--CLear Loop Printed
UPDATE V
	SET Folder_Preparation = NULL,
        SubmitToQC = NULL,
        ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblBoxup.Folder_Preparation, tblBoxup.SubmitToQC, tblBoxup.ReturnFromQC
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPPRINTED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V

--====================================================================

--UPDATE QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = QCRelease
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblBoxup.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPQCRELEASED' AND Error IS NULL AND temp.QCRelease IS NOT NULL AND tblBoxup.TR_Loop_Folder_QC_Release IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = NULL
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblBoxup.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPQCRELEASED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Folder Ready
UPDATE V
	SET HCS_Folder_Ready = FolderReady
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblBoxup.HCS_Folder_Ready
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERREADY' AND Error IS NULL AND temp.FolderReady IS NOT NULL AND tblBoxup.HCS_Folder_Ready IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Folder Ready
UPDATE V
	SET HCS_Folder_Ready = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblBoxup.HCS_Folder_Ready
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERREADY' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = SubmittedToPrecom
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblBoxup.Submitted_to_Precom
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL AND temp.SubmittedToPrecom IS NOT NULL AND tblBoxup.Submitted_to_Precom IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = NULL
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblBoxup.Submitted_to_Precom
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Done
UPDATE V
	SET L_Done = Done
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblBoxup.L_Done
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERDONE' AND Error IS NULL AND temp.Done IS NOT NULL AND tblBoxup.L_Done IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Loop Done
UPDATE V
	SET L_Done = NULL
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblBoxup.L_Done
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERDONE' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Approved
UPDATE V
	SET L_FinalApproval = FinalApproval
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblBoxup.L_FinalApproval
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERAPPROVED' AND Error IS NULL AND temp.FinalApproval IS NOT NULL AND tblBoxup.L_FinalApproval IS NULL
		AND temp.OpKey = @opKey
) AS V
--Clear Loop Approved
UPDATE V
	SET L_FinalApproval = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblBoxup.L_FinalApproval
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERAPPROVED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Submit to QC
UPDATE V
	SET lSubmitToQC = SubmitToQC
FROM (
	SELECT
		temp.Tag,
		temp.SubmitToQC,
		tblBoxup.SubmitToQC AS lSubmitToQC
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDESUBMITTOQC' AND Error IS NULL AND temp.SubmitToQC IS NOT NULL AND tblBoxup.SubmitToQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submit to QC
UPDATE V
	SET SubmitToQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblBoxup.SubmitToQC
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDESUBMITTOQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Return from QC
UPDATE V
	SET lReturnFromQC = ReturnFromQC
FROM (
	SELECT
		temp.Tag,
		temp.ReturnFromQC,
		tblBoxup.ReturnFromQC AS lReturnFromQC
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERRETURNFROMQC' AND Error IS NULL AND temp.ReturnFromQC IS NOT NULL AND tblBoxup.ReturnFromQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Return from QC
UPDATE V
	SET ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblBoxup.ReturnFromQC
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERRETURNFROMQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Construction Released
UPDATE V
	SET LConstrRelease = ConstrRelease
FROM (
	SELECT
		temp.Tag,
		temp.ConstrRelease,
		tblBoxup.L_Constr_Release AS LConstrRelease
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERCONSRELEASE' AND Error IS NULL AND temp.ConstrRelease IS NOT NULL AND tblBoxup.L_Constr_Release IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Construction Released
UPDATE V
	SET L_Constr_Release = NULL
FROM (
	SELECT
		temp.Tag,
		tblBoxup.L_Constr_Release
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERCONSRELEASE' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Const Target Date
UPDATE V
	SET ConsTargetDate = tConsTargetDate
FROM (
	SELECT
		temp.Tag,
		temp.ConsTargetDate AS tConsTargetDate,
		tblBoxup.ConsTargetDate
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERCONSTARGET' AND Error IS NULL AND temp.ConsTargetDate IS NOT NULL AND tblBoxup.ConsTargetDate IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Const Target Date
UPDATE V
	SET ConsTargetDate = NULL
FROM (
	SELECT
		temp.Tag,
		tblBoxup.ConsTargetDate
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERCONSTARGET' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================
--UPDATE Failed Date
UPDATE V
	SET FailedDate = tFailedDate
FROM (
	SELECT
		temp.Tag,
		temp.FailedDate AS tFailedDate,
		tblBoxup.FailedDate
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERFAILED' AND Error IS NULL AND temp.FailedDate IS NOT NULL AND tblBoxup.FailedDate IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Failed Date
UPDATE V
	SET FailedDate = NULL
FROM (
	SELECT
		temp.Tag,
		tblBoxup.FailedDate
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERFAILED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

EXEC dbo.CheckBoxupIntgerity


SELECT
CASE WHEN [Error] IS NULL THEN 'Updated With No Error' ELSE [Error] END AS [Error], 
Id, Tag, Type, Subtype, Area, [Description], Vendor, Subsystem, ActId, StartDate, FinishDate, Active, Priority, PDSModel, ControllerLocation AS [Controller Location], ReportedBy,
ConstrRelease,ConsTargetDate,
FolderPreparation, QCRelease, SubmitToQC, FolderReady, ReturnFromQC, SubmittedToPrecom, Done, FailedDate, FinalApproval
FROM TEMPDATA.BoxupTemp
WHERE OpKey = @opKey

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UploadBoxupBasicData'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.UploadBoxupBasicData
END
GO
CREATE PROC [TEMPDATA].[UploadBoxupBasicData]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag = ''
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag = 'SETASNULL'

--UPDATE Errors (Motor Does Exist)
UPDATE V
	SET Error = 'Motor Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.BoxupTemp AS temp
		INNER JOIN tblBoxup ON temp.Tag = tblBoxup.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE Errors (Area Does Not Exist)
UPDATE V
	SET Error = 'Area Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.BoxupTemp AS temp
		LEFT JOIN Area ON temp.Area = Area.Area
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.Area <> 'NOUPDATE' AND Area.Area IS NULL
) AS V

--UPDATE Errors (Activitiy ID Does Not Exist)
UPDATE V
	SET Error = 'Activitiy ID Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.BoxupTemp AS temp
		LEFT JOIN tblActIDS ON temp.ActId = tblActIDS.ActID
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.ActId NOT IN ('NOUPDATE', 'SETASNULL') AND tblActIDS.ActID IS NULL
) AS V

--Insert to DB with no Error

INSERT INTO dbo.tblBoxup (FolderName, [L_Type], Sub_Type, Area, [L_Description], Vendor, Subsystem, ACTIVITYID, Planning_START_Date, Planning_FINISH_Date, FolderPriority, PDSModel, Active, ControllerLocation)
SELECT 
Tag, 
CASE WHEN [Type] IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE [Type] END AS [Type], 
CASE WHEN Subtype IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Subtype END AS Subtype, 
CASE WHEN Area IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Area END AS Area, 
CASE WHEN [Description] IN ('NOUPDATE', 'SETASNULL') THEN  NULL ELSE [Description] END AS [Description] , 
CASE WHEN Vendor IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Vendor END AS Vendor, 
CASE WHEN Subsystem IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE Subsystem END AS Subsystem, 
CASE WHEN ActId IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE ActId END AS ActId, 
CASE WHEN StartDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE StartDate END AS StartDate, 
CASE WHEN FinishDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE FinishDate END AS FinishDate, 
Priority, PDSModel,
1,
CASE WHEN [ControllerLocation] IN ('NOUPDATE', 'SETASNULL') THEN NULL ELSE [ControllerLocation] END AS [ControllerLocation]
FROM TEMPDATA.BoxupTemp
WHERE OpKey = @opKey AND [Error] IS NULL
--===========================================


SELECT
CASE WHEN [Error] IS NULL THEN 'Updated With No Error' ELSE [Error] END AS [Error], 
Id, Tag, Type, Subtype, Area, [Description], Vendor, Subsystem, ActId, 
CASE WHEN StartDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE StartDate END AS StartDate, 
CASE WHEN FinishDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE FinishDate END AS FinishDate, 
Active,
Priority, PDSModel, ControllerLocation AS [ControllerLocation], ReportedBy
FolderPreparation, QCRelease, SubmitToQC, FolderReady, ReturnFromQC, SubmittedToPrecom, Done, FinalApproval
FROM TEMPDATA.BoxupTemp
WHERE OpKey = @opKey

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'ChangeBoxupStatus'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.ChangeBoxupStatus
END
GO
CREATE PROC [TEMPDATA].[ChangeBoxupStatus]
@opKey NVARCHAR(250),
@status BIT

AS

--Clean
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag = ''
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag = 'SETASNULL'



--Update

UPDATE V
	SET v.Active = @status
FROM (
	SELECT 
	dbo.tblBoxup.FolderName, dbo.tblBoxup.Active
	FROM dbo.tblBoxup
	INNER JOIN TEMPDATA.BoxupTemp ON  dbo.tblBoxup.FolderName = TEMPDATA.BoxupTemp.Tag
	WHERE OpKey = @opKey AND [Error] IS NULL
) AS V
--===========================================

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'DeleteBoxup'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.DeleteBoxup
END
GO
CREATE PROC [TEMPDATA].[DeleteBoxup]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag = ''
DELETE FROM TEMPDATA.BoxupTemp WHERE Tag = 'SETASNULL'



--Delete

DELETE FROM dbo.tblBoxup WHERE FolderName IN (
	SELECT 
	TEMPDATA.BoxupTemp.Tag
	FROM TEMPDATA.BoxupTemp
	WHERE OpKey = @opKey AND [Error] IS NULL
)

--===========================================

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'CreateBoxupPriorities'
			AND schema_id = (select schema_id from sys.schemas where name = 'BOXUP')
			)
BEGIN
	DROP PROC BOXUP.CreateBoxupPriorities
END
GO
CREATE PROC [BOXUP].[CreateBoxupPriorities]
AS
UPDATE V
    SET FolderPriority = Priority
FROM (
    SELECT
    DENSE_RANK() OVER (ORDER BY FORMAT(Planning_START_Date,'yyyyMM')) AS Priority,
    tblBoxup.Id AS Id,
    FolderPriority, FolderName
    FROM tblBoxup
    WHERE Planning_START_Date IS NOT NULL
) AS V
GO
IF NOT EXISTS(SELECT 1 FROM sys.columns 
          WHERE Name = N'BoxupIntegrity'
          AND Object_ID = Object_ID(N'dbo.AppSettings'))
BEGIN
    ALTER TABLE dbo.AppSettings
    ADD BoxupIntegrity BIT NOT NULL DEFAULT 1
END
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'CheckBoxupIntgerity'
			AND schema_id = (select schema_id from sys.schemas where name = 'dbo')
			)
BEGIN
	DROP PROC dbo.CheckBoxupIntgerity
END
GO
CREATE PROC [dbo].[CheckBoxupIntgerity]
AS
IF (SELECT BoxupIntegrity FROM dbo.AppSettings) = 1
    BEGIN
        UPDATE tblBoxup
            SET L_Done = L_FinalApproval
        WHERE L_Done IS NULL AND L_FinalApproval IS NOT NULL

        UPDATE tblBoxup
            SET Submitted_to_Precom = L_Done
        WHERE Submitted_to_Precom IS NULL AND L_Done IS NOT NULL

        UPDATE tblBoxup
            SET HCS_Folder_Ready = Submitted_to_Precom
        WHERE HCS_Folder_Ready IS NULL AND Submitted_to_Precom IS NOT NULL

        UPDATE tblBoxup
            SET SubmitToQC = HCS_Folder_Ready
        WHERE SubmitToQC IS NULL AND HCS_Folder_Ready IS NOT NULL

        UPDATE tblBoxup
            SET Folder_Preparation = HCS_Folder_Ready
        WHERE Folder_Preparation IS NULL AND HCS_Folder_Ready IS NOT NULL

        UPDATE tblBoxup
            SET ReturnFromQC = Submitted_to_Precom
        WHERE ReturnFromQC IS NULL AND Submitted_to_Precom IS NOT NULL

        UPDATE tblBoxup
            SET SubmitToQC = ReturnFromQC
        WHERE SubmitToQC IS NULL AND ReturnFromQC IS NOT NULL
        
        UPDATE tblBoxup
            SET Folder_Preparation = SubmitToQC
        WHERE Folder_Preparation IS NULL AND SubmitToQC IS NOT NULL

    END
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetFolderConstraints'
			AND schema_id = (select schema_id from sys.schemas where name = 'BOXUP')
			)
BEGIN
	DROP PROC BOXUP.GetFolderConstraints
END
GO
CREATE PROC [BOXUP].[GetFolderConstraints]
AS

WITH Folders AS (
	SELECT 
		tblBoxup.[Id] AS FolderID
		,Area
		,[FolderName] As [Folder Name]
		,[tblBoxup].L_Description AS [Description]
		,CASE WHEN L_FinalApproval IS NOT NULL THEN 'Solo Run Done'
			WHEN L_Done IS NOT NULL THEN 'Solo Run Done'
			WHEN Submitted_to_Precom IS NOT NULL THEN 'Submitted To Pre-Comm'
			WHEN HCS_Folder_Ready IS NOT NULL THEN 'Folder Ready'
			WHEN [Folder_Preparation] IS NOT NULL THEN 'Folder Prepared'
            WHEN TR_Loop_Folder_QC_Release IS NOT NULL THEN 'QC Released'
			ELSE 'Not Ready'
			END AS [Folder Status]
			,FolderPriority
			,tblProject.Pro_Title AS [Project]
		FROM [tblBoxup] WITH (NOLOCK)
		INNER JOIN tblProject ON [tblBoxup].ProUUID = tblProject.UUID
		WHERE [tblBoxup].Active = 1
	)

SELECT 
FolderCons.id AS ID
,Folders.*
,Cats.catName AS [Constraint Category]
,FolderCons.[description] AS [Description], FolderCons.issuedDate AS [Issued Date]
,IssuedBy.fullName AS [Issued By], IssuedBy.job AS [Issued By Title], IssuedBy.email AS [Issued By Mail]
,IssuedTo.fullName AS [Issued To], IssuedTo.job AS [Issued To Title], IssuedTo.email AS [Issued To Mail]
,FolderCons.comments AS Comments

FROM Folders
INNER JOIN BOXUP.tblFoldersCons AS FolderCons WITH (NOLOCK) ON Folders.FolderID = FolderCons.folderId
LEFT JOIN LOOPS.tblConsCategory AS Cats WITH (NOLOCK) ON FolderCons.conCatId = Cats.id
LEFT JOIN LOOPS.tblUsers AS IssuedBy WITH (NOLOCK) ON FolderCons.issuedById = IssuedBy.id
LEFT JOIN LOOPS.tblUsers AS IssuedTo WITH (NOLOCK) ON FolderCons.issuedToId = IssuedTo.id

WHERE FolderCons.isClosed = 0 
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'AddBlockage'
			AND schema_id = (select schema_id from sys.schemas where name = 'BOXUP')
			)
BEGIN
	DROP PROC BOXUP.AddBlockage
END
GO
CREATE PROC [BOXUP].[AddBlockage]
@catName NVARCHAR(100),
@folderId INT,
@description NVARCHAR(255),
@issuedById INT,
@issuedToId INT

AS
DECLARE @catId INT
DECLARE @CheckId INT

SELECT @CheckId = BOXUP.tblFoldersCons.id FROM BOXUP.tblFoldersCons WHERE [description] = @description AND folderId = @folderId

IF @CheckId IS NULL
    BEGIN
        SELECT @catId = id FROM LOOPS.tblConsCategory WHERE catName = @catName
        INSERT INTO BOXUP.tblFoldersCons ([conCatId], [folderId], [description], [issuedById], [issuedToId], [issuedDate], [isClosed])
        VALUES (@catId, @folderId, @description, @issuedById, @issuedToId, GETDATE(), 0)
    END

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'CloseBlockage'
			AND schema_id = (select schema_id from sys.schemas where name = 'BOXUP')
			)
BEGIN
	DROP PROC BOXUP.CloseBlockage
END
GO
CREATE PROC [BOXUP].[CloseBlockage]
@id INT,
@closedById INT = NULL

AS
UPDATE BOXUP.tblFoldersCons SET isClosed = 1, closedDate = GETDATE(), CLoseById = @closedById WHERE id = @id
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'ReassignBlockage'
			AND schema_id = (select schema_id from sys.schemas where name = 'BOXUP')
			)
BEGIN
	DROP PROC BOXUP.ReassignBlockage
END
GO
CREATE PROC [BOXUP].[ReassignBlockage]
@id INT,
@catName NVARCHAR(100),
@folderId INT,
@description NVARCHAR(255),
@issuedById INT,
@issuedToId INT,
@ReassignBy INT = NULL

AS
DECLARE @catId INT
SELECT @catId = id FROM LOOPS.tblConsCategory WHERE catName = @catName

BEGIN TRY
	INSERT INTO BOXUP.tblFoldersCons ([conCatId], [folderId], [description], [issuedById], [issuedToId], [issuedDate], [isClosed], prevId, CLoseById)
	VALUES (@catId, @folderId, @description, @issuedById, @issuedToId, GETDATE(), 0, @id, @ReassignBy)

	UPDATE BOXUP.tblFoldersCons SET isClosed = 1, closedDate = GETDATE(), CLoseById = @ReassignBy WHERE id = @id
END TRY
BEGIN CATCH
	ROLLBACK TRAN
END CATCH
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'AddComment'
			AND schema_id = (select schema_id from sys.schemas where name = 'BOXUP')
			)
BEGIN
	DROP PROC BOXUP.AddComment
END
GO
CREATE PROC [BOXUP].[AddComment]
@id INT,
@comm NVARCHAR(MAX)

AS
UPDATE BOXUP.tblFoldersCons SET comments = @comm WHERE id = @id
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'U' 
			AND name = 'BoxupSQMSTasks'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP TABLE TEMPDATA.BoxupSQMSTasks
END
GO
CREATE TABLE [TEMPDATA].[BoxupSQMSTasks](
	[FolderName] [nvarchar](250) NOT NULL,
	[ElementTag] [nvarchar](250) NOT NULL,
	[FormName] [nvarchar](250) NULL,
	[ClosingDate] [nvarchar](50) NULL,
	[Source] [nvarchar](50) NULL,
	[ItemType] [nvarchar](250) NULL,
	[Subcontractor] [nvarchar](250) NULL,
	[ClosingRemarks] [nvarchar](max) NULL,
	[DocType] [nvarchar](250) NULL,
	[UUID] [nvarchar](250) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO



EXEC dbo.AddPermissions