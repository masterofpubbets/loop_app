--version11.0.9
UPDATE [dbo].[tblSettings] SET SetValue = '11.0.9' WHERE SetName = 'VERSION'
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UpdateLoopsBasicData'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.UpdateLoopsBasicData
END
GO
CREATE PROC [TEMPDATA].[UpdateLoopsBasicData]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.LoopTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = ''
DELETE FROM TEMPDATA.LoopTemp WHERE Tag = 'SETASNULL'

--UPDATE Errors (Loop Does Not Exist)
UPDATE V
	SET Error = 'Loop Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.LoopTemp AS temp
		LEFT JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND tblInsLoop.LoopName IS NULL
) AS V

--UPDATE Errors (Area Does Not Exist)
UPDATE V
	SET Error = 'Area Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.LoopTemp AS temp
		LEFT JOIN Area ON temp.Area = Area.Area
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.Area <> 'NOUPDATE' AND Area.Area IS NULL
) AS V

--UPDATE Errors (Activitiy ID Does Not Exist)
UPDATE V
	SET Error = 'Activitiy ID Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.LoopTemp AS temp
		LEFT JOIN tblActIDS ON temp.ActId = tblActIDS.ActID
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.ActId NOT IN ('NOUPDATE', 'SETASNULL') AND tblActIDS.ActID IS NULL
) AS V

--UPDATE DESCRIPTION
UPDATE V
	SET L_Description = DESCRIPTION
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.DESCRIPTION = 'SETASNULL' THEN NULL ELSE temp.DESCRIPTION END AS DESCRIPTION,
		tblInsLoop.L_Description
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.DESCRIPTION <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Vendor
UPDATE V
	SET L_Vendor = Vendor
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Vendor = 'SETASNULL' THEN NULL ELSE temp.Vendor END AS Vendor,
		tblInsLoop.Vendor AS L_Vendor
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Vendor <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subsystem
UPDATE V
	SET L_Subsystem = Subsystem
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subsystem = 'SETASNULL' THEN NULL ELSE temp.Subsystem END AS Subsystem,
		tblInsLoop.Subsystem AS L_Subsystem
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subsystem <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Area
UPDATE V
	SET L_Area = Area
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Area = 'SETASNULL' THEN NULL ELSE temp.Area END AS Area,
		tblInsLoop.Area AS L_Area
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Area <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Type
UPDATE V
	SET L_Type = Type
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Type = 'SETASNULL' THEN NULL ELSE temp.Type END AS Type,
		tblInsLoop.L_Type
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.[Type] <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subtype
UPDATE V
	SET Sub_Type = Subtype
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subtype = 'SETASNULL' THEN NULL ELSE temp.Subtype END AS Subtype,
		tblInsLoop.Sub_Type
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subtype <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE ActId
UPDATE V
	SET ACTIVITYID = ActId
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.ActId = 'SETASNULL' THEN NULL ELSE temp.ActId END AS ActId,
		tblInsLoop.ACTIVITYID
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.ActId <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE Start Date
UPDATE V
	SET Planning_START_Date = StartDate
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.StartDate = '1/1/0001' THEN NULL ELSE temp.StartDate END AS StartDate,
		tblInsLoop.Planning_START_Date
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.StartDate <> '1/1/1900') OR (temp.StartDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Finish Date
UPDATE V
	SET Planning_FINISH_Date = FinishDate
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.FinishDate = '1/1/0001' THEN NULL ELSE temp.FinishDate END AS FinishDate,
		tblInsLoop.Planning_FINISH_Date
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.FinishDate <> '1/1/1900') OR (temp.FinishDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Active
UPDATE V
	SET Active = TempActive
FROM (
	SELECT
		temp.Tag,
		temp.Active AS [TempActive],
		tblInsLoop.Active
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Active IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE Priority
UPDATE V
	SET LoopPriority = CONVERT(INT,TempPriority)
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Priority = 'SETASNULL' THEN NULL ELSE temp.Priority END AS TempPriority,
		tblInsLoop.LoopPriority
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Priority IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE PDSModel
UPDATE V
	SET LModel = PDSModel
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.PDSModel = 'SETASNULL' THEN NULL ELSE temp.PDSModel END AS PDSModel,
		tblInsLoop.PDSModel AS LModel
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.PDSModel IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--------------------------------------------------------------------------------------------------------------------------

--UPDATE Loop Printed
UPDATE V
	SET Folder_Preparation = FolderPreparation
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblInsLoop.Folder_Preparation
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPPRINTED' AND Error IS NULL AND temp.FolderPreparation IS NOT NULL AND tblInsLoop.Folder_Preparation IS NULL
		AND temp.OpKey = @opKey
) AS V

--CLear Loop Printed
UPDATE V
	SET Folder_Preparation = NULL,
        SubmitToQC = NULL,
        ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblInsLoop.Folder_Preparation, tblInsLoop.SubmitToQC, tblInsLoop.ReturnFromQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPPRINTED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V

--====================================================================

--UPDATE QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = QCRelease
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblInsLoop.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPQCRELEASED' AND Error IS NULL AND temp.QCRelease IS NOT NULL AND tblInsLoop.TR_Loop_Folder_QC_Release IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = NULL
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblInsLoop.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPQCRELEASED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Folder Ready
UPDATE V
	SET HCS_Folder_Ready = FolderReady
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblInsLoop.HCS_Folder_Ready
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERREADY' AND Error IS NULL AND temp.FolderReady IS NOT NULL AND tblInsLoop.HCS_Folder_Ready IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Folder Ready
UPDATE V
	SET HCS_Folder_Ready = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblInsLoop.HCS_Folder_Ready
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERREADY' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = SubmittedToPrecom
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblInsLoop.Submitted_to_Precom
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL AND temp.SubmittedToPrecom IS NOT NULL AND tblInsLoop.Submitted_to_Precom IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = NULL
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblInsLoop.Submitted_to_Precom
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Done
UPDATE V
	SET L_Done = Done
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblInsLoop.L_Done
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERDONE' AND Error IS NULL AND temp.Done IS NOT NULL AND tblInsLoop.L_Done IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Loop Done
UPDATE V
	SET L_Done = NULL
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblInsLoop.L_Done
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERDONE' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Approved
UPDATE V
	SET L_FinalApproval = FinalApproval
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblInsLoop.L_FinalApproval
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERAPPROVED' AND Error IS NULL AND temp.FinalApproval IS NOT NULL AND tblInsLoop.L_FinalApproval IS NULL
		AND temp.OpKey = @opKey
) AS V
--Clear Loop Approved
UPDATE V
	SET L_FinalApproval = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblInsLoop.L_FinalApproval
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERAPPROVED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Submit to QC
UPDATE V
	SET lSubmitToQC = SubmitToQC
FROM (
	SELECT
		temp.Tag,
		temp.SubmitToQC,
		tblInsLoop.SubmitToQC AS lSubmitToQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDESUBMITTOQC' AND Error IS NULL AND temp.SubmitToQC IS NOT NULL AND tblInsLoop.SubmitToQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submit to QC
UPDATE V
	SET SubmitToQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblInsLoop.SubmitToQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDESUBMITTOQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Return from QC
UPDATE V
	SET lReturnFromQC = ReturnFromQC
FROM (
	SELECT
		temp.Tag,
		temp.ReturnFromQC,
		tblInsLoop.ReturnFromQC AS lReturnFromQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'UPDATELOOPFOLDERRETURNFROMQC' AND Error IS NULL AND temp.ReturnFromQC IS NOT NULL AND tblInsLoop.ReturnFromQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Return from QC
UPDATE V
	SET ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblInsLoop.ReturnFromQC
		FROM TEMPDATA.LoopTemp AS temp
		INNER JOIN tblInsLoop ON temp.Tag = tblInsLoop.LoopName
		WHERE UpdateType = 'CLEARLOOPFOLDERRETURNFROMQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

EXEC dbo.CheckLoopIntgerity



SELECT
CASE WHEN [Error] IS NULL THEN 'Updated With No Error' ELSE [Error] END AS [Error], 
Id, Tag, Type, Subtype, Area, [Description], Vendor, Subsystem, ActId, 
CASE WHEN StartDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE StartDate END AS StartDate,
CASE WHEN FinishDate IN ('1/1/0001', '1/1/1900') THEN NULL ELSE FinishDate END AS FinishDate,
Active, Priority, PDSModel, ReportedBy,
FolderPreparation, QCRelease, SubmitToQC, FolderReady, ReturnFromQC, SubmittedToPrecom, Done, FinalApproval
FROM TEMPDATA.LoopTemp
WHERE OpKey = @opKey

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'UpdateSolorunBasicData'
			AND schema_id = (select schema_id from sys.schemas where name = 'TEMPDATA')
			)
BEGIN
	DROP PROC TEMPDATA.UpdateSolorunBasicData
END
GO
CREATE PROC [TEMPDATA].[UpdateSolorunBasicData]
@opKey NVARCHAR(250)

AS

--Clean
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag IS NULL
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = ''
DELETE FROM TEMPDATA.SolorunTemp WHERE Tag = 'SETASNULL'

--UPDATE Errors (Solorun Does Not Exist)
UPDATE V
	SET Error = 'Solorun Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.SolorunTemp AS temp
		LEFT JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND tblSolorun.FolderName IS NULL
) AS V

--UPDATE Errors (Area Does Not Exist)
UPDATE V
	SET Error = 'Area Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.SolorunTemp AS temp
		LEFT JOIN Area ON temp.Area = Area.Area
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.Area <> 'NOUPDATE' AND Area.Area IS NULL
) AS V

--UPDATE Errors (Activitiy ID Does Not Exist)
UPDATE V
	SET Error = 'Activitiy ID Does Not Exist'
FROM (
	SELECT
		temp.Tag, temp.Error
		FROM TEMPDATA.SolorunTemp AS temp
		LEFT JOIN tblActIDS ON temp.ActId = tblActIDS.ActID
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL
		AND temp.OpKey = @opKey AND temp.ActId NOT IN ('NOUPDATE', 'SETASNULL') AND tblActIDS.ActID IS NULL
) AS V

--UPDATE DESCRIPTION
UPDATE V
	SET L_Description = DESCRIPTION
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.DESCRIPTION = 'SETASNULL' THEN NULL ELSE temp.DESCRIPTION END AS DESCRIPTION,
		tblSolorun.L_Description
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.DESCRIPTION <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Vendor
UPDATE V
	SET L_Vendor = Vendor
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Vendor = 'SETASNULL' THEN NULL ELSE temp.Vendor END AS Vendor,
		tblSolorun.Vendor AS L_Vendor
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Vendor <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subsystem
UPDATE V
	SET L_Subsystem = Subsystem
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subsystem = 'SETASNULL' THEN NULL ELSE temp.Subsystem END AS Subsystem,
		tblSolorun.Subsystem AS L_Subsystem
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subsystem <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Area
UPDATE V
	SET L_Area = Area
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Area = 'SETASNULL' THEN NULL ELSE temp.Area END AS Area,
		tblSolorun.Area AS L_Area
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Area <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Type
UPDATE V
	SET L_Type = Type
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Type = 'SETASNULL' THEN NULL ELSE temp.Type END AS Type,
		tblSolorun.L_Type
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.[Type] <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V


--UPDATE Subtype
UPDATE V
	SET Sub_Type = Subtype
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Subtype = 'SETASNULL' THEN NULL ELSE temp.Subtype END AS Subtype,
		tblSolorun.Sub_Type
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Subtype <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE ActId
UPDATE V
	SET ACTIVITYID = ActId
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.ActId = 'SETASNULL' THEN NULL ELSE temp.ActId END AS ActId,
		tblSolorun.ACTIVITYID
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.ActId <> 'NOUPDATE'
		AND temp.OpKey = @opKey
) AS V

--UPDATE Start Date
UPDATE V
	SET Planning_START_Date = StartDate
FROM (
	SELECT
		temp.Tag,
		temp.StartDate AS StartDate,
		tblSolorun.Planning_START_Date
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.StartDate <> '1/1/1900') OR (temp.StartDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Finish Date
UPDATE V
	SET Planning_FINISH_Date = FinishDate
FROM (
	SELECT
		temp.Tag,
		temp.FinishDate AS FinishDate,
		tblSolorun.Planning_FINISH_Date
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND ((temp.FinishDate <> '1/1/1900') OR (temp.FinishDate IS NULL))
		AND temp.OpKey = @opKey
) AS V

--UPDATE Active
UPDATE V
	SET Active = TempActive
FROM (
	SELECT
		temp.Tag,
		temp.Active AS [TempActive],
		tblSolorun.Active
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Active IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE Priority
UPDATE V
	SET FolderPriority = CONVERT(INT,TempPriority)
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.Priority = 'SETASNULL' THEN NULL ELSE temp.Priority END AS TempPriority,
		tblSolorun.FolderPriority
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.Priority IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--UPDATE PDSModel
UPDATE V
	SET LModel = PDSModel
FROM (
	SELECT
		temp.Tag,
		CASE WHEN temp.PDSModel = 'SETASNULL' THEN NULL ELSE temp.PDSModel END AS PDSModel,
		tblSolorun.PDSModel AS LModel
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATEDATA' AND Error IS NULL AND temp.PDSModel IS NOT NULL
		AND temp.OpKey = @opKey
) AS V

--------------------------------------------------------------------------------------------------------------------------

--UPDATE Loop Printed
UPDATE V
	SET Folder_Preparation = FolderPreparation
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblSolorun.Folder_Preparation
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPPRINTED' AND Error IS NULL AND temp.FolderPreparation IS NOT NULL AND tblSolorun.Folder_Preparation IS NULL
		AND temp.OpKey = @opKey
) AS V

--CLear Loop Printed
UPDATE V
	SET Folder_Preparation = NULL,
        SubmitToQC = NULL,
        ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderPreparation,
		tblSolorun.Folder_Preparation, tblSolorun.SubmitToQC, tblSolorun.ReturnFromQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPPRINTED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V

--====================================================================

--UPDATE QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = QCRelease
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblSolorun.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPQCRELEASED' AND Error IS NULL AND temp.QCRelease IS NOT NULL AND tblSolorun.TR_Loop_Folder_QC_Release IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear QC Release
UPDATE V
	SET TR_Loop_Folder_QC_Release = NULL
FROM (
	SELECT
		temp.Tag,
		temp.QCRelease,
		tblSolorun.TR_Loop_Folder_QC_Release
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPQCRELEASED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Folder Ready
UPDATE V
	SET HCS_Folder_Ready = FolderReady
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblSolorun.HCS_Folder_Ready
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERREADY' AND Error IS NULL AND temp.FolderReady IS NOT NULL AND tblSolorun.HCS_Folder_Ready IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Folder Ready
UPDATE V
	SET HCS_Folder_Ready = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FolderReady,
		tblSolorun.HCS_Folder_Ready
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERREADY' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================


--UPDATE Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = SubmittedToPrecom
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblSolorun.Submitted_to_Precom
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL AND temp.SubmittedToPrecom IS NOT NULL AND tblSolorun.Submitted_to_Precom IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submitted to Precom
UPDATE V
	SET Submitted_to_Precom = NULL
FROM (
	SELECT
		temp.Tag,
		temp.SubmittedToPrecom,
		tblSolorun.Submitted_to_Precom
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERSUBMITTEDTPPRECOMM' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Done
UPDATE V
	SET L_Done = Done
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblSolorun.L_Done
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERDONE' AND Error IS NULL AND temp.Done IS NOT NULL AND tblSolorun.L_Done IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Loop Done
UPDATE V
	SET L_Done = NULL
FROM (
	SELECT
		temp.Tag,
		temp.Done,
		tblSolorun.L_Done
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERDONE' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Loop Approved
UPDATE V
	SET L_FinalApproval = FinalApproval
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblSolorun.L_FinalApproval
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERAPPROVED' AND Error IS NULL AND temp.FinalApproval IS NOT NULL AND tblSolorun.L_FinalApproval IS NULL
		AND temp.OpKey = @opKey
) AS V
--Clear Loop Approved
UPDATE V
	SET L_FinalApproval = NULL
FROM (
	SELECT
		temp.Tag,
		temp.FinalApproval,
		tblSolorun.L_FinalApproval
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERAPPROVED' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Submit to QC
UPDATE V
	SET lSubmitToQC = SubmitToQC
FROM (
	SELECT
		temp.Tag,
		temp.SubmitToQC,
		tblSolorun.SubmitToQC AS lSubmitToQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDESUBMITTOQC' AND Error IS NULL AND temp.SubmitToQC IS NOT NULL AND tblSolorun.SubmitToQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Submit to QC
UPDATE V
	SET SubmitToQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblSolorun.SubmitToQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDESUBMITTOQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

--UPDATE Return from QC
UPDATE V
	SET lReturnFromQC = ReturnFromQC
FROM (
	SELECT
		temp.Tag,
		temp.ReturnFromQC,
		tblSolorun.ReturnFromQC AS lReturnFromQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'UPDATELOOPFOLDERRETURNFROMQC' AND Error IS NULL AND temp.ReturnFromQC IS NOT NULL AND tblSolorun.ReturnFromQC IS NULL
		AND temp.OpKey = @opKey
) AS V

--Clear Return from QC
UPDATE V
	SET ReturnFromQC = NULL
FROM (
	SELECT
		temp.Tag,
		tblSolorun.ReturnFromQC
		FROM TEMPDATA.SolorunTemp AS temp
		INNER JOIN tblSolorun ON temp.Tag = tblSolorun.FolderName
		WHERE UpdateType = 'CLEARLOOPFOLDERRETURNFROMQC' AND Error IS NULL
		AND temp.OpKey = @opKey
) AS V
--====================================================================

EXEC dbo.CheckSolorunIntgerity


SELECT
CASE WHEN [Error] IS NULL THEN 'Updated With No Error' ELSE [Error] END AS [Error], 
Id, Tag, Type, Subtype, Area, [Description], Vendor, Subsystem, ActId, StartDate, FinishDate, Active, Priority, PDSModel, ReportedBy
FolderPreparation, QCRelease, SubmitToQC, FolderReady, ReturnFromQC, SubmittedToPrecom, Done, FinalApproval
FROM TEMPDATA.SolorunTemp
WHERE OpKey = @opKey

GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetFoldersHCS'
			AND schema_id = (select schema_id from sys.schemas where name = 'MOTORS')
			)
BEGIN
	DROP PROC MOTORS.GetFoldersHCS
END
GO
CREATE PROC [MOTORS].[GetFoldersHCS]
AS
WITH LoopsData AS (

SELECT DISTINCT tblSolorun.Id
	  ,Area
      ,[FolderName] As [Folder Name]
	  ,L_Description AS [Description]
      ,[L_Type] As [Type]
      ,[Sub_Type] AS [Sub Type]
	  ,[Subsystem]
	  ,[Subcontractor]
      ,[Vendor]
	  
	  ,L_Constr_Release AS [Cons Complete]
	  ,TR_Loop_Folder_QC_Release AS [QC Released]
      ,[Folder_Preparation] AS [Folder Printed]
      ,SubmitToQC AS [Submitted To QC]
	  ,HCS_Folder_Ready AS [Folder Ready QC]
      ,ReturnFromQC AS [Return From QC]
	  ,Submitted_to_Precom AS [Submitted To Precomm]
	  ,L_Done AS [Done]
	  ,L_FinalApproval AS [Final Approval]
      
	  ,CASE WHEN L_FinalApproval IS NOT NULL THEN 'Solo Run Done'
		WHEN L_Done IS NOT NULL THEN 'Solo Run Done'
		WHEN Submitted_to_Precom IS NOT NULL THEN 'Submitted To Pre-Comm'
		WHEN ReturnFromQC IS NOT NULL THEN 'Returned From QC'
		WHEN HCS_Folder_Ready IS NOT NULL THEN 'Folder Ready'
		WHEN SubmitToQC IS NOT NULL THEN 'Submitted To QC'
        WHEN [Folder_Preparation] IS NOT NULL THEN 'Folder Printed'
		WHEN TR_Loop_Folder_QC_Release IS NOT NULL THEN 'QC Released'
		WHEN L_Constr_Release IS NOT NULL THEN 'Construction Complete'
		ELSE 'Not Ready'
		END AS [Folder Status]
		,FolderPriority
		,tblProject.Pro_Title AS [Project]
		--,[qrCode] AS QRCode
		,tblSolorun.ProUUID 
        ,tblSolorun.PDSModel
        ,tblSolorun.Planning_START_Date AS [Plan Start Date]
        ,tblSolorun.Planning_FINISH_Date AS [Plan Finish Date]
  FROM [tblSolorun] WITH (NOLOCK)
  INNER JOIN tblProject ON [tblSolorun].ProUUID = tblProject.UUID
  WHERE [tblSolorun].Active = 1
)

SELECT DISTINCT
CASE WHEN LOOPS.tblLoopsCons.isClosed = 0 THEN 'Yes' ELSE 'No' END AS [Has Blockage]
,LoopsData.*

FROM LoopsData
LEFT JOIN LOOPS.tblLoopsCons WITH (NOLOCK) ON LoopsData.Id = LOOPS.tblLoopsCons.loopId
GO
IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetFolderConstraints'
			AND schema_id = (select schema_id from sys.schemas where name = 'MOTORS')
			)
BEGIN
	DROP PROC MOTORS.GetFolderConstraints
END
GO
CREATE PROC [MOTORS].[GetFolderConstraints]
AS

WITH Folders AS (
	SELECT 
		tblSolorun.[Id] AS FolderID
		,Area
		,[FolderName] As [Folder Name]
		,[tblSolorun].L_Description AS [Description]
		,CASE WHEN L_FinalApproval IS NOT NULL THEN 'Solo Run Done'
			WHEN L_Done IS NOT NULL THEN 'Solo Run Done'
			WHEN Submitted_to_Precom IS NOT NULL THEN 'Submitted To Pre-Comm'
			WHEN HCS_Folder_Ready IS NOT NULL THEN 'Folder Ready'
			WHEN [Folder_Preparation] IS NOT NULL THEN 'Folder Prepared'
            WHEN TR_Loop_Folder_QC_Release IS NOT NULL THEN 'QC Released'
			ELSE 'Not Ready'
			END AS [Folder Status]
			,FolderPriority
			,tblProject.Pro_Title AS [Project]
		FROM [tblSolorun] WITH (NOLOCK)
		INNER JOIN tblProject ON [tblSolorun].ProUUID = tblProject.UUID
		WHERE [tblSolorun].Active = 1 AND L_Done IS NULL
	)

SELECT 
FolderCons.id AS ID
,Folders.*
,Cats.catName AS [Constraint Category]
,FolderCons.[description] AS [Description], FolderCons.issuedDate AS [Issued Date]
,IssuedBy.fullName AS [Issued By], IssuedBy.job AS [Issued By Title], IssuedBy.email AS [Issued By Mail]
,IssuedTo.fullName AS [Issued To], IssuedTo.job AS [Issued To Title], IssuedTo.email AS [Issued To Mail]
,FolderCons.comments AS Comments

FROM Folders
INNER JOIN MOTORS.tblFoldersCons AS FolderCons WITH (NOLOCK) ON Folders.FolderID = FolderCons.folderId
LEFT JOIN LOOPS.tblConsCategory AS Cats WITH (NOLOCK) ON FolderCons.conCatId = Cats.id
LEFT JOIN LOOPS.tblUsers AS IssuedBy WITH (NOLOCK) ON FolderCons.issuedById = IssuedBy.id
LEFT JOIN LOOPS.tblUsers AS IssuedTo WITH (NOLOCK) ON FolderCons.issuedToId = IssuedTo.id

WHERE FolderCons.isClosed = 0 
GO

IF EXISTS (SELECT 1 FROM sys.objects 
			WHERE type = 'P' 
			AND name = 'GetLoopsConstraints'
			AND schema_id = (select schema_id from sys.schemas where name = 'LOOPS')
			)
BEGIN
	DROP PROC LOOPS.GetLoopsConstraints
END
GO
CREATE PROC [LOOPS].[GetLoopsConstraints]
AS

WITH Loops AS (
	SELECT 
		[TBL_ID] AS LoopID
		,Area
		,[LoopName] As [Loop Name]
		,[tblInsLoop].L_Description AS [Loop Description]
		,CASE WHEN L_FinalApproval IS NOT NULL THEN 'Loop Done'
			WHEN L_Done IS NOT NULL THEN 'Loop Done'
			WHEN Submitted_to_Precom IS NOT NULL THEN 'Submitted To Pre-Comm'
			WHEN HCS_Folder_Ready IS NOT NULL THEN 'Folder Ready'
			WHEN [Folder_Preparation] IS NOT NULL THEN 'Folder Prepared'
            WHEN TR_Loop_Folder_QC_Release IS NOT NULL THEN 'QC Released'
			ELSE 'Not Ready'
			END AS [Folder Status]
			,LoopPriority
			,tblProject.Pro_Title AS [Project]
		FROM [tblInsLoop] WITH (NOLOCK)
		INNER JOIN tblProject ON [tblInsLoop].ProUUID = tblProject.UUID
		WHERE [tblInsLoop].Active = 1 AND L_Done IS NULL
	)

SELECT 
LoopsCons.id AS ID
,Loops.*
,LoopsCats.catName AS [Constraint Category]
,LoopsCons.[description] AS [Description], LoopsCons.issuedDate AS [Issued Date]
,IssuedBy.fullName AS [Issued By], IssuedBy.job AS [Issued By Title], IssuedBy.email AS [Issued By Mail]
,IssuedTo.fullName AS [Issued To], IssuedTo.job AS [Issued To Title], IssuedTo.email AS [Issued To Mail]
,LoopsCons.comments AS Comments

FROM Loops
INNER JOIN LOOPS.tblLoopsCons AS LoopsCons WITH (NOLOCK) ON Loops.LoopID = LoopsCons.[loopId]
LEFT JOIN LOOPS.tblConsCategory AS LoopsCats WITH (NOLOCK) ON LoopsCons.conCatId = LoopsCats.id
LEFT JOIN LOOPS.tblUsers AS IssuedBy WITH (NOLOCK) ON LoopsCons.issuedById = IssuedBy.id
LEFT JOIN LOOPS.tblUsers AS IssuedTo WITH (NOLOCK) ON LoopsCons.issuedToId = IssuedTo.id

WHERE LoopsCons.isClosed = 0 
GO
